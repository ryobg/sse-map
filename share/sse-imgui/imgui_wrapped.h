/**
 * @file imgui_wrapped.h
 * @brief Public ImGUI C API for users of SSE ImGui
 * @internal
 *
 * This file is part of the Skyrim SE ImGui mod (aka SSE ImGui).
 *
 *   SSE ImGui includes parts licensed under MIT, that is the CImGui and ImGUI
 *   files included in this project. Refer to their individual licenses.
 *
 *   SSE ImGui is free software: you can redistribute it and/or modify it
 *   under the terms of the GNU Lesser General Public License as published
 *   by the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SSE ImGui is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with SSE ImGui. If not, see <http://www.gnu.org/licenses/>.
 *
 * @endinternal
 *
 * @ingroup Public API
 *
 * @see https://github.com/cimgui/cimgui
 * @see https://github.com/ocornut/imgui
 *
 * @details
 * This file is auto-generated from pre-parsed files of cimgui, which in turn
 * is auto-generated from the ImGui headers. Purpose of this file is to enable
 * ImGui being bundled in a shared library which is explicitly linked.
 * Basically, allow SSE ImGui to exist as SKSE plugin and being shared across
 * many other plugin users. Otherwise everybody who wants to utilize ImGui
 * would have to hold on its own copy in the process memory, which is still
 * possible, but it will consume much more resources.
 *
 * See the #sseimgui_imgui_api() function to create a copy of the pointers set.
 * Note that the pointers calling convention follows the CImGui one, not the 
 * project one.
 */

#ifndef SSEIMGUI_IMGUI_WRAPPED_H
#define SSEIMGUI_IMGUI_WRAPPED_H

/* Prefer the pointer table, and save users from re-exporting each time */

#ifndef   CIMGUI_NO_EXPORT
#  define CIMGUI_NO_EXPORT
#endif
#ifndef   CIMGUI_DEFINE_ENUMS_AND_STRUCTS
#  define CIMGUI_DEFINE_ENUMS_AND_STRUCTS
#endif
#include <sse-imgui/cimgui.h>

#include <sse-imgui/platform.h>

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************/

/* Taken from imgui.h itself, as not existing in cimgui.h */

#ifndef SSEIMGUI_DISABLE_IMGUI_MACROS

#define IMGUI_VERSION               "1.84 WIP"
#define IMGUI_VERSION_NUM           18304

#define IM_ARRAYSIZE(_ARR)          ((int)(sizeof(_ARR)/sizeof(*_ARR)))
#define IM_OFFSETOF(_TYPE,_MEMBER)  ((size_t)&(((_TYPE*)0)->_MEMBER))
#define IM_UNUSED(_VAR)             ((void)_VAR)

#define IMGUI_PAYLOAD_TYPE_COLOR_3F     "_COL3F"
#define IMGUI_PAYLOAD_TYPE_COLOR_4F     "_COL4F"

#ifdef IMGUI_USE_BGRA_PACKED_COLOR
#define IM_COL32_R_SHIFT    16
#define IM_COL32_G_SHIFT    8
#define IM_COL32_B_SHIFT    0
#define IM_COL32_A_SHIFT    24
#define IM_COL32_A_MASK     0xFF000000
#else
#define IM_COL32_R_SHIFT    0
#define IM_COL32_G_SHIFT    8
#define IM_COL32_B_SHIFT    16
#define IM_COL32_A_SHIFT    24
#define IM_COL32_A_MASK     0xFF000000
#endif

#define IM_COL32(R,G,B,A)    (((ImU32)(A)<<IM_COL32_A_SHIFT) | ((ImU32)(B)<<IM_COL32_B_SHIFT) | ((ImU32)(G)<<IM_COL32_G_SHIFT) | ((ImU32)(R)<<IM_COL32_R_SHIFT))
#define IM_COL32_WHITE       IM_COL32(255,255,255,255)
#define IM_COL32_BLACK       IM_COL32(0,0,0,255)
#define IM_COL32_BLACK_TRANS IM_COL32(0,0,0,0)

#endif

/******************************************************************************/

/** Holds all CImGui (hence ImGui) functions as pointers */

struct imgui_api_v1
{
    ImVec2* (* ImVec2_ImVec2_Nil) (void);
    void (* ImVec2_destroy) (ImVec2* self);
    ImVec2* (* ImVec2_ImVec2_Float) (float _x,float _y);
    ImVec4* (* ImVec4_ImVec4_Nil) (void);
    void (* ImVec4_destroy) (ImVec4* self);
    ImVec4* (* ImVec4_ImVec4_Float) (float _x,float _y,float _z,float _w);
    ImGuiContext* (* igCreateContext) (ImFontAtlas* shared_font_atlas);
    void (* igDestroyContext) (ImGuiContext* ctx);
    ImGuiContext* (* igGetCurrentContext) (void);
    void (* igSetCurrentContext) (ImGuiContext* ctx);
    ImGuiIO* (* igGetIO) (void);
    ImGuiStyle* (* igGetStyle) (void);
    void (* igNewFrame) (void);
    void (* igEndFrame) (void);
    void (* igRender) (void);
    ImDrawData* (* igGetDrawData) (void);
    void (* igShowDemoWindow) (bool* p_open);
    void (* igShowMetricsWindow) (bool* p_open);
    void (* igShowAboutWindow) (bool* p_open);
    void (* igShowStyleEditor) (ImGuiStyle* ref);
    bool (* igShowStyleSelector) (const char* label);
    void (* igShowFontSelector) (const char* label);
    void (* igShowUserGuide) (void);
    const char* (* igGetVersion) (void);
    void (* igStyleColorsDark) (ImGuiStyle* dst);
    void (* igStyleColorsLight) (ImGuiStyle* dst);
    void (* igStyleColorsClassic) (ImGuiStyle* dst);
    bool (* igBegin) (const char* name,bool* p_open,ImGuiWindowFlags flags);
    void (* igEnd) (void);
    bool (* igBeginChild_Str) (const char* str_id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
    bool (* igBeginChild_ID) (ImGuiID id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
    void (* igEndChild) (void);
    bool (* igIsWindowAppearing) (void);
    bool (* igIsWindowCollapsed) (void);
    bool (* igIsWindowFocused) (ImGuiFocusedFlags flags);
    bool (* igIsWindowHovered) (ImGuiHoveredFlags flags);
    ImDrawList* (* igGetWindowDrawList) (void);
    float (* igGetWindowDpiScale) (void);
    void (* igGetWindowPos) (ImVec2 *pOut);
    void (* igGetWindowSize) (ImVec2 *pOut);
    float (* igGetWindowWidth) (void);
    float (* igGetWindowHeight) (void);
    ImGuiViewport* (* igGetWindowViewport) (void);
    void (* igSetNextWindowPos) (const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot);
    void (* igSetNextWindowSize) (const ImVec2 size,ImGuiCond cond);
    void (* igSetNextWindowSizeConstraints) (const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data);
    void (* igSetNextWindowContentSize) (const ImVec2 size);
    void (* igSetNextWindowCollapsed) (bool collapsed,ImGuiCond cond);
    void (* igSetNextWindowFocus) (void);
    void (* igSetNextWindowBgAlpha) (float alpha);
    void (* igSetNextWindowViewport) (ImGuiID viewport_id);
    void (* igSetWindowPos_Vec2) (const ImVec2 pos,ImGuiCond cond);
    void (* igSetWindowSize_Vec2) (const ImVec2 size,ImGuiCond cond);
    void (* igSetWindowCollapsed_Bool) (bool collapsed,ImGuiCond cond);
    void (* igSetWindowFocus_Nil) (void);
    void (* igSetWindowFontScale) (float scale);
    void (* igSetWindowPos_Str) (const char* name,const ImVec2 pos,ImGuiCond cond);
    void (* igSetWindowSize_Str) (const char* name,const ImVec2 size,ImGuiCond cond);
    void (* igSetWindowCollapsed_Str) (const char* name,bool collapsed,ImGuiCond cond);
    void (* igSetWindowFocus_Str) (const char* name);
    void (* igGetContentRegionAvail) (ImVec2 *pOut);
    void (* igGetContentRegionMax) (ImVec2 *pOut);
    void (* igGetWindowContentRegionMin) (ImVec2 *pOut);
    void (* igGetWindowContentRegionMax) (ImVec2 *pOut);
    float (* igGetWindowContentRegionWidth) (void);
    float (* igGetScrollX) (void);
    float (* igGetScrollY) (void);
    void (* igSetScrollX_Float) (float scroll_x);
    void (* igSetScrollY_Float) (float scroll_y);
    float (* igGetScrollMaxX) (void);
    float (* igGetScrollMaxY) (void);
    void (* igSetScrollHereX) (float center_x_ratio);
    void (* igSetScrollHereY) (float center_y_ratio);
    void (* igSetScrollFromPosX_Float) (float local_x,float center_x_ratio);
    void (* igSetScrollFromPosY_Float) (float local_y,float center_y_ratio);
    void (* igPushFont) (ImFont* font);
    void (* igPopFont) (void);
    void (* igPushStyleColor_U32) (ImGuiCol idx,ImU32 col);
    void (* igPushStyleColor_Vec4) (ImGuiCol idx,const ImVec4 col);
    void (* igPopStyleColor) (int count);
    void (* igPushStyleVar_Float) (ImGuiStyleVar idx,float val);
    void (* igPushStyleVar_Vec2) (ImGuiStyleVar idx,const ImVec2 val);
    void (* igPopStyleVar) (int count);
    void (* igPushAllowKeyboardFocus) (bool allow_keyboard_focus);
    void (* igPopAllowKeyboardFocus) (void);
    void (* igPushButtonRepeat) (bool repeat);
    void (* igPopButtonRepeat) (void);
    void (* igPushItemWidth) (float item_width);
    void (* igPopItemWidth) (void);
    void (* igSetNextItemWidth) (float item_width);
    float (* igCalcItemWidth) (void);
    void (* igPushTextWrapPos) (float wrap_local_pos_x);
    void (* igPopTextWrapPos) (void);
    ImFont* (* igGetFont) (void);
    float (* igGetFontSize) (void);
    void (* igGetFontTexUvWhitePixel) (ImVec2 *pOut);
    ImU32 (* igGetColorU32_Col) (ImGuiCol idx,float alpha_mul);
    ImU32 (* igGetColorU32_Vec4) (const ImVec4 col);
    ImU32 (* igGetColorU32_U32) (ImU32 col);
    const ImVec4* (* igGetStyleColorVec4) (ImGuiCol idx);
    void (* igSeparator) (void);
    void (* igSameLine) (float offset_from_start_x,float spacing);
    void (* igNewLine) (void);
    void (* igSpacing) (void);
    void (* igDummy) (const ImVec2 size);
    void (* igIndent) (float indent_w);
    void (* igUnindent) (float indent_w);
    void (* igBeginGroup) (void);
    void (* igEndGroup) (void);
    void (* igGetCursorPos) (ImVec2 *pOut);
    float (* igGetCursorPosX) (void);
    float (* igGetCursorPosY) (void);
    void (* igSetCursorPos) (const ImVec2 local_pos);
    void (* igSetCursorPosX) (float local_x);
    void (* igSetCursorPosY) (float local_y);
    void (* igGetCursorStartPos) (ImVec2 *pOut);
    void (* igGetCursorScreenPos) (ImVec2 *pOut);
    void (* igSetCursorScreenPos) (const ImVec2 pos);
    void (* igAlignTextToFramePadding) (void);
    float (* igGetTextLineHeight) (void);
    float (* igGetTextLineHeightWithSpacing) (void);
    float (* igGetFrameHeight) (void);
    float (* igGetFrameHeightWithSpacing) (void);
    void (* igPushID_Str) (const char* str_id);
    void (* igPushID_StrStr) (const char* str_id_begin,const char* str_id_end);
    void (* igPushID_Ptr) (const void* ptr_id);
    void (* igPushID_Int) (int int_id);
    void (* igPopID) (void);
    ImGuiID (* igGetID_Str) (const char* str_id);
    ImGuiID (* igGetID_StrStr) (const char* str_id_begin,const char* str_id_end);
    ImGuiID (* igGetID_Ptr) (const void* ptr_id);
    void (* igTextUnformatted) (const char* text,const char* text_end);
    void (* igText) (const char* fmt,...);
    void (* igTextV) (const char* fmt,va_list args);
    void (* igTextColored) (const ImVec4 col,const char* fmt,...);
    void (* igTextColoredV) (const ImVec4 col,const char* fmt,va_list args);
    void (* igTextDisabled) (const char* fmt,...);
    void (* igTextDisabledV) (const char* fmt,va_list args);
    void (* igTextWrapped) (const char* fmt,...);
    void (* igTextWrappedV) (const char* fmt,va_list args);
    void (* igLabelText) (const char* label,const char* fmt,...);
    void (* igLabelTextV) (const char* label,const char* fmt,va_list args);
    void (* igBulletText) (const char* fmt,...);
    void (* igBulletTextV) (const char* fmt,va_list args);
    bool (* igButton) (const char* label,const ImVec2 size);
    bool (* igSmallButton) (const char* label);
    bool (* igInvisibleButton) (const char* str_id,const ImVec2 size,ImGuiButtonFlags flags);
    bool (* igArrowButton) (const char* str_id,ImGuiDir dir);
    void (* igImage) (ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col);
    bool (* igImageButton) (ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,int frame_padding,const ImVec4 bg_col,const ImVec4 tint_col);
    bool (* igCheckbox) (const char* label,bool* v);
    bool (* igCheckboxFlags_IntPtr) (const char* label,int* flags,int flags_value);
    bool (* igCheckboxFlags_UintPtr) (const char* label,unsigned int* flags,unsigned int flags_value);
    bool (* igRadioButton_Bool) (const char* label,bool active);
    bool (* igRadioButton_IntPtr) (const char* label,int* v,int v_button);
    void (* igProgressBar) (float fraction,const ImVec2 size_arg,const char* overlay);
    void (* igBullet) (void);
    bool (* igBeginCombo) (const char* label,const char* preview_value,ImGuiComboFlags flags);
    void (* igEndCombo) (void);
    bool (* igCombo_Str_arr) (const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items);
    bool (* igCombo_Str) (const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items);
    bool (* igCombo_FnBoolPtr) (const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items);
    bool (* igDragFloat) (const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igDragFloat2) (const char* label,float v[2],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igDragFloat3) (const char* label,float v[3],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igDragFloat4) (const char* label,float v[4],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igDragFloatRange2) (const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
    bool (* igDragInt) (const char* label,int* v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igDragInt2) (const char* label,int v[2],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igDragInt3) (const char* label,int v[3],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igDragInt4) (const char* label,int v[4],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igDragIntRange2) (const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
    bool (* igDragScalar) (const char* label,ImGuiDataType data_type,void* p_data,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    bool (* igDragScalarN) (const char* label,ImGuiDataType data_type,void* p_data,int components,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderFloat) (const char* label,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderFloat2) (const char* label,float v[2],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderFloat3) (const char* label,float v[3],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderFloat4) (const char* label,float v[4],float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderAngle) (const char* label,float* v_rad,float v_degrees_min,float v_degrees_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderInt) (const char* label,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderInt2) (const char* label,int v[2],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderInt3) (const char* label,int v[3],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderInt4) (const char* label,int v[4],int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderScalar) (const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderScalarN) (const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    bool (* igVSliderFloat) (const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igVSliderInt) (const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
    bool (* igVSliderScalar) (const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    bool (* igInputText) (const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
    bool (* igInputTextMultiline) (const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
    bool (* igInputTextWithHint) (const char* label,const char* hint,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
    bool (* igInputFloat) (const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags flags);
    bool (* igInputFloat2) (const char* label,float v[2],const char* format,ImGuiInputTextFlags flags);
    bool (* igInputFloat3) (const char* label,float v[3],const char* format,ImGuiInputTextFlags flags);
    bool (* igInputFloat4) (const char* label,float v[4],const char* format,ImGuiInputTextFlags flags);
    bool (* igInputInt) (const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags flags);
    bool (* igInputInt2) (const char* label,int v[2],ImGuiInputTextFlags flags);
    bool (* igInputInt3) (const char* label,int v[3],ImGuiInputTextFlags flags);
    bool (* igInputInt4) (const char* label,int v[4],ImGuiInputTextFlags flags);
    bool (* igInputDouble) (const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags flags);
    bool (* igInputScalar) (const char* label,ImGuiDataType data_type,void* p_data,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
    bool (* igInputScalarN) (const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
    bool (* igColorEdit3) (const char* label,float col[3],ImGuiColorEditFlags flags);
    bool (* igColorEdit4) (const char* label,float col[4],ImGuiColorEditFlags flags);
    bool (* igColorPicker3) (const char* label,float col[3],ImGuiColorEditFlags flags);
    bool (* igColorPicker4) (const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col);
    bool (* igColorButton) (const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,ImVec2 size);
    void (* igSetColorEditOptions) (ImGuiColorEditFlags flags);
    bool (* igTreeNode_Str) (const char* label);
    bool (* igTreeNode_StrStr) (const char* str_id,const char* fmt,...);
    bool (* igTreeNode_Ptr) (const void* ptr_id,const char* fmt,...);
    bool (* igTreeNodeV_Str) (const char* str_id,const char* fmt,va_list args);
    bool (* igTreeNodeV_Ptr) (const void* ptr_id,const char* fmt,va_list args);
    bool (* igTreeNodeEx_Str) (const char* label,ImGuiTreeNodeFlags flags);
    bool (* igTreeNodeEx_StrStr) (const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
    bool (* igTreeNodeEx_Ptr) (const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
    bool (* igTreeNodeExV_Str) (const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
    bool (* igTreeNodeExV_Ptr) (const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
    void (* igTreePush_Str) (const char* str_id);
    void (* igTreePush_Ptr) (const void* ptr_id);
    void (* igTreePop) (void);
    float (* igGetTreeNodeToLabelSpacing) (void);
    bool (* igCollapsingHeader_TreeNodeFlags) (const char* label,ImGuiTreeNodeFlags flags);
    bool (* igCollapsingHeader_BoolPtr) (const char* label,bool* p_visible,ImGuiTreeNodeFlags flags);
    void (* igSetNextItemOpen) (bool is_open,ImGuiCond cond);
    bool (* igSelectable_Bool) (const char* label,bool selected,ImGuiSelectableFlags flags,const ImVec2 size);
    bool (* igSelectable_BoolPtr) (const char* label,bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size);
    bool (* igBeginListBox) (const char* label,const ImVec2 size);
    void (* igEndListBox) (void);
    bool (* igListBox_Str_arr) (const char* label,int* current_item,const char* const items[],int items_count,int height_in_items);
    bool (* igListBox_FnBoolPtr) (const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items);
    void (* igPlotLines_FloatPtr) (const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
    void (* igPlotLines_FnFloatPtr) (const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
    void (* igPlotHistogram_FloatPtr) (const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
    void (* igPlotHistogram_FnFloatPtr) (const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
    void (* igValue_Bool) (const char* prefix,bool b);
    void (* igValue_Int) (const char* prefix,int v);
    void (* igValue_Uint) (const char* prefix,unsigned int v);
    void (* igValue_Float) (const char* prefix,float v,const char* float_format);
    bool (* igBeginMenuBar) (void);
    void (* igEndMenuBar) (void);
    bool (* igBeginMainMenuBar) (void);
    void (* igEndMainMenuBar) (void);
    bool (* igBeginMenu) (const char* label,bool enabled);
    void (* igEndMenu) (void);
    bool (* igMenuItem_Bool) (const char* label,const char* shortcut,bool selected,bool enabled);
    bool (* igMenuItem_BoolPtr) (const char* label,const char* shortcut,bool* p_selected,bool enabled);
    void (* igBeginTooltip) (void);
    void (* igEndTooltip) (void);
    void (* igSetTooltip) (const char* fmt,...);
    void (* igSetTooltipV) (const char* fmt,va_list args);
    bool (* igBeginPopup) (const char* str_id,ImGuiWindowFlags flags);
    bool (* igBeginPopupModal) (const char* name,bool* p_open,ImGuiWindowFlags flags);
    void (* igEndPopup) (void);
    void (* igOpenPopup_Str) (const char* str_id,ImGuiPopupFlags popup_flags);
    void (* igOpenPopup_ID) (ImGuiID id,ImGuiPopupFlags popup_flags);
    void (* igOpenPopupOnItemClick) (const char* str_id,ImGuiPopupFlags popup_flags);
    void (* igCloseCurrentPopup) (void);
    bool (* igBeginPopupContextItem) (const char* str_id,ImGuiPopupFlags popup_flags);
    bool (* igBeginPopupContextWindow) (const char* str_id,ImGuiPopupFlags popup_flags);
    bool (* igBeginPopupContextVoid) (const char* str_id,ImGuiPopupFlags popup_flags);
    bool (* igIsPopupOpen_Str) (const char* str_id,ImGuiPopupFlags flags);
    bool (* igBeginTable) (const char* str_id,int column,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width);
    void (* igEndTable) (void);
    void (* igTableNextRow) (ImGuiTableRowFlags row_flags,float min_row_height);
    bool (* igTableNextColumn) (void);
    bool (* igTableSetColumnIndex) (int column_n);
    void (* igTableSetupColumn) (const char* label,ImGuiTableColumnFlags flags,float init_width_or_weight,ImGuiID user_id);
    void (* igTableSetupScrollFreeze) (int cols,int rows);
    void (* igTableHeadersRow) (void);
    void (* igTableHeader) (const char* label);
    ImGuiTableSortSpecs* (* igTableGetSortSpecs) (void);
    int (* igTableGetColumnCount) (void);
    int (* igTableGetColumnIndex) (void);
    int (* igTableGetRowIndex) (void);
    const char* (* igTableGetColumnName_Int) (int column_n);
    ImGuiTableColumnFlags (* igTableGetColumnFlags) (int column_n);
    void (* igTableSetColumnEnabled) (int column_n,bool v);
    void (* igTableSetBgColor) (ImGuiTableBgTarget target,ImU32 color,int column_n);
    void (* igColumns) (int count,const char* id,bool border);
    void (* igNextColumn) (void);
    int (* igGetColumnIndex) (void);
    float (* igGetColumnWidth) (int column_index);
    void (* igSetColumnWidth) (int column_index,float width);
    float (* igGetColumnOffset) (int column_index);
    void (* igSetColumnOffset) (int column_index,float offset_x);
    int (* igGetColumnsCount) (void);
    bool (* igBeginTabBar) (const char* str_id,ImGuiTabBarFlags flags);
    void (* igEndTabBar) (void);
    bool (* igBeginTabItem) (const char* label,bool* p_open,ImGuiTabItemFlags flags);
    void (* igEndTabItem) (void);
    bool (* igTabItemButton) (const char* label,ImGuiTabItemFlags flags);
    void (* igSetTabItemClosed) (const char* tab_or_docked_window_label);
    ImGuiID (* igDockSpace) (ImGuiID id,const ImVec2 size,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
    ImGuiID (* igDockSpaceOverViewport) (const ImGuiViewport* viewport,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
    void (* igSetNextWindowDockID) (ImGuiID dock_id,ImGuiCond cond);
    void (* igSetNextWindowClass) (const ImGuiWindowClass* window_class);
    ImGuiID (* igGetWindowDockID) (void);
    bool (* igIsWindowDocked) (void);
    void (* igLogToTTY) (int auto_open_depth);
    void (* igLogToFile) (int auto_open_depth,const char* filename);
    void (* igLogToClipboard) (int auto_open_depth);
    void (* igLogFinish) (void);
    void (* igLogButtons) (void);
    void (* igLogTextV) (const char* fmt,va_list args);
    bool (* igBeginDragDropSource) (ImGuiDragDropFlags flags);
    bool (* igSetDragDropPayload) (const char* type,const void* data,size_t sz,ImGuiCond cond);
    void (* igEndDragDropSource) (void);
    bool (* igBeginDragDropTarget) (void);
    const ImGuiPayload* (* igAcceptDragDropPayload) (const char* type,ImGuiDragDropFlags flags);
    void (* igEndDragDropTarget) (void);
    const ImGuiPayload* (* igGetDragDropPayload) (void);
    void (* igPushClipRect) (const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
    void (* igPopClipRect) (void);
    void (* igSetItemDefaultFocus) (void);
    void (* igSetKeyboardFocusHere) (int offset);
    bool (* igIsItemHovered) (ImGuiHoveredFlags flags);
    bool (* igIsItemActive) (void);
    bool (* igIsItemFocused) (void);
    bool (* igIsItemClicked) (ImGuiMouseButton mouse_button);
    bool (* igIsItemVisible) (void);
    bool (* igIsItemEdited) (void);
    bool (* igIsItemActivated) (void);
    bool (* igIsItemDeactivated) (void);
    bool (* igIsItemDeactivatedAfterEdit) (void);
    bool (* igIsItemToggledOpen) (void);
    bool (* igIsAnyItemHovered) (void);
    bool (* igIsAnyItemActive) (void);
    bool (* igIsAnyItemFocused) (void);
    void (* igGetItemRectMin) (ImVec2 *pOut);
    void (* igGetItemRectMax) (ImVec2 *pOut);
    void (* igGetItemRectSize) (ImVec2 *pOut);
    void (* igSetItemAllowOverlap) (void);
    ImGuiViewport* (* igGetMainViewport) (void);
    bool (* igIsRectVisible_Nil) (const ImVec2 size);
    bool (* igIsRectVisible_Vec2) (const ImVec2 rect_min,const ImVec2 rect_max);
    double (* igGetTime) (void);
    int (* igGetFrameCount) (void);
    ImDrawList* (* igGetBackgroundDrawList_Nil) (void);
    ImDrawList* (* igGetForegroundDrawList_Nil) (void);
    ImDrawList* (* igGetBackgroundDrawList_ViewportPtr) (ImGuiViewport* viewport);
    ImDrawList* (* igGetForegroundDrawList_ViewportPtr) (ImGuiViewport* viewport);
    ImDrawListSharedData* (* igGetDrawListSharedData) (void);
    const char* (* igGetStyleColorName) (ImGuiCol idx);
    void (* igSetStateStorage) (ImGuiStorage* storage);
    ImGuiStorage* (* igGetStateStorage) (void);
    void (* igCalcListClipping) (int items_count,float items_height,int* out_items_display_start,int* out_items_display_end);
    bool (* igBeginChildFrame) (ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags);
    void (* igEndChildFrame) (void);
    void (* igCalcTextSize) (ImVec2 *pOut,const char* text,const char* text_end,bool hide_text_after_double_hash,float wrap_width);
    void (* igColorConvertU32ToFloat4) (ImVec4 *pOut,ImU32 in);
    ImU32 (* igColorConvertFloat4ToU32) (const ImVec4 in);
    void (* igColorConvertRGBtoHSV) (float r,float g,float b,float* out_h,float* out_s,float* out_v);
    void (* igColorConvertHSVtoRGB) (float h,float s,float v,float* out_r,float* out_g,float* out_b);
    int (* igGetKeyIndex) (ImGuiKey imgui_key);
    bool (* igIsKeyDown) (int user_key_index);
    bool (* igIsKeyPressed) (int user_key_index,bool repeat);
    bool (* igIsKeyReleased) (int user_key_index);
    int (* igGetKeyPressedAmount) (int key_index,float repeat_delay,float rate);
    void (* igCaptureKeyboardFromApp) (bool want_capture_keyboard_value);
    bool (* igIsMouseDown) (ImGuiMouseButton button);
    bool (* igIsMouseClicked) (ImGuiMouseButton button,bool repeat);
    bool (* igIsMouseReleased) (ImGuiMouseButton button);
    bool (* igIsMouseDoubleClicked) (ImGuiMouseButton button);
    bool (* igIsMouseHoveringRect) (const ImVec2 r_min,const ImVec2 r_max,bool clip);
    bool (* igIsMousePosValid) (const ImVec2* mouse_pos);
    bool (* igIsAnyMouseDown) (void);
    void (* igGetMousePos) (ImVec2 *pOut);
    void (* igGetMousePosOnOpeningCurrentPopup) (ImVec2 *pOut);
    bool (* igIsMouseDragging) (ImGuiMouseButton button,float lock_threshold);
    void (* igGetMouseDragDelta) (ImVec2 *pOut,ImGuiMouseButton button,float lock_threshold);
    void (* igResetMouseDragDelta) (ImGuiMouseButton button);
    ImGuiMouseCursor (* igGetMouseCursor) (void);
    void (* igSetMouseCursor) (ImGuiMouseCursor cursor_type);
    void (* igCaptureMouseFromApp) (bool want_capture_mouse_value);
    const char* (* igGetClipboardText) (void);
    void (* igSetClipboardText) (const char* text);
    void (* igLoadIniSettingsFromDisk) (const char* ini_filename);
    void (* igLoadIniSettingsFromMemory) (const char* ini_data,size_t ini_size);
    void (* igSaveIniSettingsToDisk) (const char* ini_filename);
    const char* (* igSaveIniSettingsToMemory) (size_t* out_ini_size);
    bool (* igDebugCheckVersionAndDataLayout) (const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert,size_t sz_drawidx);
    void (* igSetAllocatorFunctions) (ImGuiMemAllocFunc alloc_func,ImGuiMemFreeFunc free_func,void* user_data);
    void (* igGetAllocatorFunctions) (ImGuiMemAllocFunc* p_alloc_func,ImGuiMemFreeFunc* p_free_func,void** p_user_data);
    void* (* igMemAlloc) (size_t size);
    void (* igMemFree) (void* ptr);
    ImGuiPlatformIO* (* igGetPlatformIO) (void);
    void (* igUpdatePlatformWindows) (void);
    void (* igRenderPlatformWindowsDefault) (void* platform_render_arg,void* renderer_render_arg);
    void (* igDestroyPlatformWindows) (void);
    ImGuiViewport* (* igFindViewportByID) (ImGuiID id);
    ImGuiViewport* (* igFindViewportByPlatformHandle) (void* platform_handle);
    ImGuiStyle* (* ImGuiStyle_ImGuiStyle) (void);
    void (* ImGuiStyle_destroy) (ImGuiStyle* self);
    void (* ImGuiStyle_ScaleAllSizes) (ImGuiStyle* self,float scale_factor);
    void (* ImGuiIO_AddInputCharacter) (ImGuiIO* self,unsigned int c);
    void (* ImGuiIO_AddInputCharacterUTF16) (ImGuiIO* self,ImWchar16 c);
    void (* ImGuiIO_AddInputCharactersUTF8) (ImGuiIO* self,const char* str);
    void (* ImGuiIO_ClearInputCharacters) (ImGuiIO* self);
    ImGuiIO* (* ImGuiIO_ImGuiIO) (void);
    void (* ImGuiIO_destroy) (ImGuiIO* self);
    ImGuiInputTextCallbackData* (* ImGuiInputTextCallbackData_ImGuiInputTextCallbackData) (void);
    void (* ImGuiInputTextCallbackData_destroy) (ImGuiInputTextCallbackData* self);
    void (* ImGuiInputTextCallbackData_DeleteChars) (ImGuiInputTextCallbackData* self,int pos,int bytes_count);
    void (* ImGuiInputTextCallbackData_InsertChars) (ImGuiInputTextCallbackData* self,int pos,const char* text,const char* text_end);
    void (* ImGuiInputTextCallbackData_SelectAll) (ImGuiInputTextCallbackData* self);
    void (* ImGuiInputTextCallbackData_ClearSelection) (ImGuiInputTextCallbackData* self);
    bool (* ImGuiInputTextCallbackData_HasSelection) (ImGuiInputTextCallbackData* self);
    ImGuiWindowClass* (* ImGuiWindowClass_ImGuiWindowClass) (void);
    void (* ImGuiWindowClass_destroy) (ImGuiWindowClass* self);
    ImGuiPayload* (* ImGuiPayload_ImGuiPayload) (void);
    void (* ImGuiPayload_destroy) (ImGuiPayload* self);
    void (* ImGuiPayload_Clear) (ImGuiPayload* self);
    bool (* ImGuiPayload_IsDataType) (ImGuiPayload* self,const char* type);
    bool (* ImGuiPayload_IsPreview) (ImGuiPayload* self);
    bool (* ImGuiPayload_IsDelivery) (ImGuiPayload* self);
    ImGuiTableColumnSortSpecs* (* ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs) (void);
    void (* ImGuiTableColumnSortSpecs_destroy) (ImGuiTableColumnSortSpecs* self);
    ImGuiTableSortSpecs* (* ImGuiTableSortSpecs_ImGuiTableSortSpecs) (void);
    void (* ImGuiTableSortSpecs_destroy) (ImGuiTableSortSpecs* self);
    ImGuiOnceUponAFrame* (* ImGuiOnceUponAFrame_ImGuiOnceUponAFrame) (void);
    void (* ImGuiOnceUponAFrame_destroy) (ImGuiOnceUponAFrame* self);
    ImGuiTextFilter* (* ImGuiTextFilter_ImGuiTextFilter) (const char* default_filter);
    void (* ImGuiTextFilter_destroy) (ImGuiTextFilter* self);
    bool (* ImGuiTextFilter_Draw) (ImGuiTextFilter* self,const char* label,float width);
    bool (* ImGuiTextFilter_PassFilter) (ImGuiTextFilter* self,const char* text,const char* text_end);
    void (* ImGuiTextFilter_Build) (ImGuiTextFilter* self);
    void (* ImGuiTextFilter_Clear) (ImGuiTextFilter* self);
    bool (* ImGuiTextFilter_IsActive) (ImGuiTextFilter* self);
    ImGuiTextRange* (* ImGuiTextRange_ImGuiTextRange_Nil) (void);
    void (* ImGuiTextRange_destroy) (ImGuiTextRange* self);
    ImGuiTextRange* (* ImGuiTextRange_ImGuiTextRange_Str) (const char* _b,const char* _e);
    bool (* ImGuiTextRange_empty) (ImGuiTextRange* self);
    void (* ImGuiTextRange_split) (ImGuiTextRange* self,char separator,ImVector_ImGuiTextRange* out);
    ImGuiTextBuffer* (* ImGuiTextBuffer_ImGuiTextBuffer) (void);
    void (* ImGuiTextBuffer_destroy) (ImGuiTextBuffer* self);
    const char* (* ImGuiTextBuffer_begin) (ImGuiTextBuffer* self);
    const char* (* ImGuiTextBuffer_end) (ImGuiTextBuffer* self);
    int (* ImGuiTextBuffer_size) (ImGuiTextBuffer* self);
    bool (* ImGuiTextBuffer_empty) (ImGuiTextBuffer* self);
    void (* ImGuiTextBuffer_clear) (ImGuiTextBuffer* self);
    void (* ImGuiTextBuffer_reserve) (ImGuiTextBuffer* self,int capacity);
    const char* (* ImGuiTextBuffer_c_str) (ImGuiTextBuffer* self);
    void (* ImGuiTextBuffer_append) (ImGuiTextBuffer* self,const char* str,const char* str_end);
    void (* ImGuiTextBuffer_appendfv) (ImGuiTextBuffer* self,const char* fmt,va_list args);
    ImGuiStoragePair* (* ImGuiStoragePair_ImGuiStoragePair_Int) (ImGuiID _key,int _val_i);
    void (* ImGuiStoragePair_destroy) (ImGuiStoragePair* self);
    ImGuiStoragePair* (* ImGuiStoragePair_ImGuiStoragePair_Float) (ImGuiID _key,float _val_f);
    ImGuiStoragePair* (* ImGuiStoragePair_ImGuiStoragePair_Ptr) (ImGuiID _key,void* _val_p);
    void (* ImGuiStorage_Clear) (ImGuiStorage* self);
    int (* ImGuiStorage_GetInt) (ImGuiStorage* self,ImGuiID key,int default_val);
    void (* ImGuiStorage_SetInt) (ImGuiStorage* self,ImGuiID key,int val);
    bool (* ImGuiStorage_GetBool) (ImGuiStorage* self,ImGuiID key,bool default_val);
    void (* ImGuiStorage_SetBool) (ImGuiStorage* self,ImGuiID key,bool val);
    float (* ImGuiStorage_GetFloat) (ImGuiStorage* self,ImGuiID key,float default_val);
    void (* ImGuiStorage_SetFloat) (ImGuiStorage* self,ImGuiID key,float val);
    void* (* ImGuiStorage_GetVoidPtr) (ImGuiStorage* self,ImGuiID key);
    void (* ImGuiStorage_SetVoidPtr) (ImGuiStorage* self,ImGuiID key,void* val);
    int* (* ImGuiStorage_GetIntRef) (ImGuiStorage* self,ImGuiID key,int default_val);
    bool* (* ImGuiStorage_GetBoolRef) (ImGuiStorage* self,ImGuiID key,bool default_val);
    float* (* ImGuiStorage_GetFloatRef) (ImGuiStorage* self,ImGuiID key,float default_val);
    void** (* ImGuiStorage_GetVoidPtrRef) (ImGuiStorage* self,ImGuiID key,void* default_val);
    void (* ImGuiStorage_SetAllInt) (ImGuiStorage* self,int val);
    void (* ImGuiStorage_BuildSortByKey) (ImGuiStorage* self);
    ImGuiListClipper* (* ImGuiListClipper_ImGuiListClipper) (void);
    void (* ImGuiListClipper_destroy) (ImGuiListClipper* self);
    void (* ImGuiListClipper_Begin) (ImGuiListClipper* self,int items_count,float items_height);
    void (* ImGuiListClipper_End) (ImGuiListClipper* self);
    bool (* ImGuiListClipper_Step) (ImGuiListClipper* self);
    ImColor* (* ImColor_ImColor_Nil) (void);
    void (* ImColor_destroy) (ImColor* self);
    ImColor* (* ImColor_ImColor_Int) (int r,int g,int b,int a);
    ImColor* (* ImColor_ImColor_U32) (ImU32 rgba);
    ImColor* (* ImColor_ImColor_Float) (float r,float g,float b,float a);
    ImColor* (* ImColor_ImColor_Vec4) (const ImVec4 col);
    void (* ImColor_SetHSV) (ImColor* self,float h,float s,float v,float a);
    void (* ImColor_HSV) (ImColor *pOut,float h,float s,float v,float a);
    ImDrawCmd* (* ImDrawCmd_ImDrawCmd) (void);
    void (* ImDrawCmd_destroy) (ImDrawCmd* self);
    ImTextureID (* ImDrawCmd_GetTexID) (ImDrawCmd* self);
    ImDrawListSplitter* (* ImDrawListSplitter_ImDrawListSplitter) (void);
    void (* ImDrawListSplitter_destroy) (ImDrawListSplitter* self);
    void (* ImDrawListSplitter_Clear) (ImDrawListSplitter* self);
    void (* ImDrawListSplitter_ClearFreeMemory) (ImDrawListSplitter* self);
    void (* ImDrawListSplitter_Split) (ImDrawListSplitter* self,ImDrawList* draw_list,int count);
    void (* ImDrawListSplitter_Merge) (ImDrawListSplitter* self,ImDrawList* draw_list);
    void (* ImDrawListSplitter_SetCurrentChannel) (ImDrawListSplitter* self,ImDrawList* draw_list,int channel_idx);
    ImDrawList* (* ImDrawList_ImDrawList) (const ImDrawListSharedData* shared_data);
    void (* ImDrawList_destroy) (ImDrawList* self);
    void (* ImDrawList_PushClipRect) (ImDrawList* self,ImVec2 clip_rect_min,ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
    void (* ImDrawList_PushClipRectFullScreen) (ImDrawList* self);
    void (* ImDrawList_PopClipRect) (ImDrawList* self);
    void (* ImDrawList_PushTextureID) (ImDrawList* self,ImTextureID texture_id);
    void (* ImDrawList_PopTextureID) (ImDrawList* self);
    void (* ImDrawList_GetClipRectMin) (ImVec2 *pOut,ImDrawList* self);
    void (* ImDrawList_GetClipRectMax) (ImVec2 *pOut,ImDrawList* self);
    void (* ImDrawList_AddLine) (ImDrawList* self,const ImVec2 p1,const ImVec2 p2,ImU32 col,float thickness);
    void (* ImDrawList_AddRect) (ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags,float thickness);
    void (* ImDrawList_AddRectFilled) (ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags);
    void (* ImDrawList_AddRectFilledMultiColor) (ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left);
    void (* ImDrawList_AddQuad) (ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness);
    void (* ImDrawList_AddQuadFilled) (ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col);
    void (* ImDrawList_AddTriangle) (ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness);
    void (* ImDrawList_AddTriangleFilled) (ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col);
    void (* ImDrawList_AddCircle) (ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
    void (* ImDrawList_AddCircleFilled) (ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
    void (* ImDrawList_AddNgon) (ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
    void (* ImDrawList_AddNgonFilled) (ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
    void (* ImDrawList_AddText_Vec2) (ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end);
    void (* ImDrawList_AddText_FontPtr) (ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end,float wrap_width,const ImVec4* cpu_fine_clip_rect);
    void (* ImDrawList_AddPolyline) (ImDrawList* self,const ImVec2* points,int num_points,ImU32 col,ImDrawFlags flags,float thickness);
    void (* ImDrawList_AddConvexPolyFilled) (ImDrawList* self,const ImVec2* points,int num_points,ImU32 col);
    void (* ImDrawList_AddBezierCubic) (ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness,int num_segments);
    void (* ImDrawList_AddBezierQuadratic) (ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness,int num_segments);
    void (* ImDrawList_AddImage) (ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col);
    void (* ImDrawList_AddImageQuad) (ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 uv1,const ImVec2 uv2,const ImVec2 uv3,const ImVec2 uv4,ImU32 col);
    void (* ImDrawList_AddImageRounded) (ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding,ImDrawFlags flags);
    void (* ImDrawList_PathClear) (ImDrawList* self);
    void (* ImDrawList_PathLineTo) (ImDrawList* self,const ImVec2 pos);
    void (* ImDrawList_PathLineToMergeDuplicate) (ImDrawList* self,const ImVec2 pos);
    void (* ImDrawList_PathFillConvex) (ImDrawList* self,ImU32 col);
    void (* ImDrawList_PathStroke) (ImDrawList* self,ImU32 col,ImDrawFlags flags,float thickness);
    void (* ImDrawList_PathArcTo) (ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments);
    void (* ImDrawList_PathArcToFast) (ImDrawList* self,const ImVec2 center,float radius,int a_min_of_12,int a_max_of_12);
    void (* ImDrawList_PathBezierCubicCurveTo) (ImDrawList* self,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,int num_segments);
    void (* ImDrawList_PathBezierQuadraticCurveTo) (ImDrawList* self,const ImVec2 p2,const ImVec2 p3,int num_segments);
    void (* ImDrawList_PathRect) (ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding,ImDrawFlags flags);
    void (* ImDrawList_AddCallback) (ImDrawList* self,ImDrawCallback callback,void* callback_data);
    void (* ImDrawList_AddDrawCmd) (ImDrawList* self);
    ImDrawList* (* ImDrawList_CloneOutput) (ImDrawList* self);
    void (* ImDrawList_ChannelsSplit) (ImDrawList* self,int count);
    void (* ImDrawList_ChannelsMerge) (ImDrawList* self);
    void (* ImDrawList_ChannelsSetCurrent) (ImDrawList* self,int n);
    void (* ImDrawList_PrimReserve) (ImDrawList* self,int idx_count,int vtx_count);
    void (* ImDrawList_PrimUnreserve) (ImDrawList* self,int idx_count,int vtx_count);
    void (* ImDrawList_PrimRect) (ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col);
    void (* ImDrawList_PrimRectUV) (ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
    void (* ImDrawList_PrimQuadUV) (ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
    void (* ImDrawList_PrimWriteVtx) (ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
    void (* ImDrawList_PrimWriteIdx) (ImDrawList* self,ImDrawIdx idx);
    void (* ImDrawList_PrimVtx) (ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
    void (* ImDrawList__ResetForNewFrame) (ImDrawList* self);
    void (* ImDrawList__ClearFreeMemory) (ImDrawList* self);
    void (* ImDrawList__PopUnusedDrawCmd) (ImDrawList* self);
    void (* ImDrawList__OnChangedClipRect) (ImDrawList* self);
    void (* ImDrawList__OnChangedTextureID) (ImDrawList* self);
    void (* ImDrawList__OnChangedVtxOffset) (ImDrawList* self);
    int (* ImDrawList__CalcCircleAutoSegmentCount) (ImDrawList* self,float radius);
    void (* ImDrawList__PathArcToFastEx) (ImDrawList* self,const ImVec2 center,float radius,int a_min_sample,int a_max_sample,int a_step);
    void (* ImDrawList__PathArcToN) (ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments);
    ImDrawData* (* ImDrawData_ImDrawData) (void);
    void (* ImDrawData_destroy) (ImDrawData* self);
    void (* ImDrawData_Clear) (ImDrawData* self);
    void (* ImDrawData_DeIndexAllBuffers) (ImDrawData* self);
    void (* ImDrawData_ScaleClipRects) (ImDrawData* self,const ImVec2 fb_scale);
    ImFontConfig* (* ImFontConfig_ImFontConfig) (void);
    void (* ImFontConfig_destroy) (ImFontConfig* self);
    ImFontGlyphRangesBuilder* (* ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder) (void);
    void (* ImFontGlyphRangesBuilder_destroy) (ImFontGlyphRangesBuilder* self);
    void (* ImFontGlyphRangesBuilder_Clear) (ImFontGlyphRangesBuilder* self);
    bool (* ImFontGlyphRangesBuilder_GetBit) (ImFontGlyphRangesBuilder* self,size_t n);
    void (* ImFontGlyphRangesBuilder_SetBit) (ImFontGlyphRangesBuilder* self,size_t n);
    void (* ImFontGlyphRangesBuilder_AddChar) (ImFontGlyphRangesBuilder* self,ImWchar c);
    void (* ImFontGlyphRangesBuilder_AddText) (ImFontGlyphRangesBuilder* self,const char* text,const char* text_end);
    void (* ImFontGlyphRangesBuilder_AddRanges) (ImFontGlyphRangesBuilder* self,const ImWchar* ranges);
    void (* ImFontGlyphRangesBuilder_BuildRanges) (ImFontGlyphRangesBuilder* self,ImVector_ImWchar* out_ranges);
    ImFontAtlasCustomRect* (* ImFontAtlasCustomRect_ImFontAtlasCustomRect) (void);
    void (* ImFontAtlasCustomRect_destroy) (ImFontAtlasCustomRect* self);
    bool (* ImFontAtlasCustomRect_IsPacked) (ImFontAtlasCustomRect* self);
    ImFontAtlas* (* ImFontAtlas_ImFontAtlas) (void);
    void (* ImFontAtlas_destroy) (ImFontAtlas* self);
    ImFont* (* ImFontAtlas_AddFont) (ImFontAtlas* self,const ImFontConfig* font_cfg);
    ImFont* (* ImFontAtlas_AddFontDefault) (ImFontAtlas* self,const ImFontConfig* font_cfg);
    ImFont* (* ImFontAtlas_AddFontFromFileTTF) (ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
    ImFont* (* ImFontAtlas_AddFontFromMemoryTTF) (ImFontAtlas* self,void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
    ImFont* (* ImFontAtlas_AddFontFromMemoryCompressedTTF) (ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
    ImFont* (* ImFontAtlas_AddFontFromMemoryCompressedBase85TTF) (ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
    void (* ImFontAtlas_ClearInputData) (ImFontAtlas* self);
    void (* ImFontAtlas_ClearTexData) (ImFontAtlas* self);
    void (* ImFontAtlas_ClearFonts) (ImFontAtlas* self);
    void (* ImFontAtlas_Clear) (ImFontAtlas* self);
    bool (* ImFontAtlas_Build) (ImFontAtlas* self);
    void (* ImFontAtlas_GetTexDataAsAlpha8) (ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
    void (* ImFontAtlas_GetTexDataAsRGBA32) (ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
    bool (* ImFontAtlas_IsBuilt) (ImFontAtlas* self);
    void (* ImFontAtlas_SetTexID) (ImFontAtlas* self,ImTextureID id);
    const ImWchar* (* ImFontAtlas_GetGlyphRangesDefault) (ImFontAtlas* self);
    const ImWchar* (* ImFontAtlas_GetGlyphRangesKorean) (ImFontAtlas* self);
    const ImWchar* (* ImFontAtlas_GetGlyphRangesJapanese) (ImFontAtlas* self);
    const ImWchar* (* ImFontAtlas_GetGlyphRangesChineseFull) (ImFontAtlas* self);
    const ImWchar* (* ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon) (ImFontAtlas* self);
    const ImWchar* (* ImFontAtlas_GetGlyphRangesCyrillic) (ImFontAtlas* self);
    const ImWchar* (* ImFontAtlas_GetGlyphRangesThai) (ImFontAtlas* self);
    const ImWchar* (* ImFontAtlas_GetGlyphRangesVietnamese) (ImFontAtlas* self);
    int (* ImFontAtlas_AddCustomRectRegular) (ImFontAtlas* self,int width,int height);
    int (* ImFontAtlas_AddCustomRectFontGlyph) (ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset);
    ImFontAtlasCustomRect* (* ImFontAtlas_GetCustomRectByIndex) (ImFontAtlas* self,int index);
    void (* ImFontAtlas_CalcCustomRectUV) (ImFontAtlas* self,const ImFontAtlasCustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max);
    bool (* ImFontAtlas_GetMouseCursorTexData) (ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2]);
    ImFont* (* ImFont_ImFont) (void);
    void (* ImFont_destroy) (ImFont* self);
    const ImFontGlyph* (* ImFont_FindGlyph) (ImFont* self,ImWchar c);
    const ImFontGlyph* (* ImFont_FindGlyphNoFallback) (ImFont* self,ImWchar c);
    float (* ImFont_GetCharAdvance) (ImFont* self,ImWchar c);
    bool (* ImFont_IsLoaded) (ImFont* self);
    const char* (* ImFont_GetDebugName) (ImFont* self);
    void (* ImFont_CalcTextSizeA) (ImVec2 *pOut,ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end,const char** remaining);
    const char* (* ImFont_CalcWordWrapPositionA) (ImFont* self,float scale,const char* text,const char* text_end,float wrap_width);
    void (* ImFont_RenderChar) (ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,ImWchar c);
    void (* ImFont_RenderText) (ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width,bool cpu_fine_clip);
    void (* ImFont_BuildLookupTable) (ImFont* self);
    void (* ImFont_ClearOutputData) (ImFont* self);
    void (* ImFont_GrowIndex) (ImFont* self,int new_size);
    void (* ImFont_AddGlyph) (ImFont* self,const ImFontConfig* src_cfg,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x);
    void (* ImFont_AddRemapChar) (ImFont* self,ImWchar dst,ImWchar src,bool overwrite_dst);
    void (* ImFont_SetGlyphVisible) (ImFont* self,ImWchar c,bool visible);
    void (* ImFont_SetFallbackChar) (ImFont* self,ImWchar c);
    bool (* ImFont_IsGlyphRangeUnused) (ImFont* self,unsigned int c_begin,unsigned int c_last);
    ImGuiViewport* (* ImGuiViewport_ImGuiViewport) (void);
    void (* ImGuiViewport_destroy) (ImGuiViewport* self);
    void (* ImGuiViewport_GetCenter) (ImVec2 *pOut,ImGuiViewport* self);
    void (* ImGuiViewport_GetWorkCenter) (ImVec2 *pOut,ImGuiViewport* self);
    ImGuiPlatformIO* (* ImGuiPlatformIO_ImGuiPlatformIO) (void);
    void (* ImGuiPlatformIO_destroy) (ImGuiPlatformIO* self);
    ImGuiPlatformMonitor* (* ImGuiPlatformMonitor_ImGuiPlatformMonitor) (void);
    void (* ImGuiPlatformMonitor_destroy) (ImGuiPlatformMonitor* self);
    ImGuiID (* igImHashData) (const void* data,size_t data_size,ImU32 seed);
    ImGuiID (* igImHashStr) (const char* data,size_t data_size,ImU32 seed);
    ImU32 (* igImAlphaBlendColors) (ImU32 col_a,ImU32 col_b);
    bool (* igImIsPowerOfTwo_Int) (int v);
    bool (* igImIsPowerOfTwo_U64) (ImU64 v);
    int (* igImUpperPowerOfTwo) (int v);
    int (* igImStricmp) (const char* str1,const char* str2);
    int (* igImStrnicmp) (const char* str1,const char* str2,size_t count);
    void (* igImStrncpy) (char* dst,const char* src,size_t count);
    char* (* igImStrdup) (const char* str);
    char* (* igImStrdupcpy) (char* dst,size_t* p_dst_size,const char* str);
    const char* (* igImStrchrRange) (const char* str_begin,const char* str_end,char c);
    int (* igImStrlenW) (const ImWchar* str);
    const char* (* igImStreolRange) (const char* str,const char* str_end);
    const ImWchar* (* igImStrbolW) (const ImWchar* buf_mid_line,const ImWchar* buf_begin);
    const char* (* igImStristr) (const char* haystack,const char* haystack_end,const char* needle,const char* needle_end);
    void (* igImStrTrimBlanks) (char* str);
    const char* (* igImStrSkipBlank) (const char* str);
    int (* igImFormatString) (char* buf,size_t buf_size,const char* fmt,...);
    int (* igImFormatStringV) (char* buf,size_t buf_size,const char* fmt,va_list args);
    const char* (* igImParseFormatFindStart) (const char* format);
    const char* (* igImParseFormatFindEnd) (const char* format);
    const char* (* igImParseFormatTrimDecorations) (const char* format,char* buf,size_t buf_size);
    int (* igImParseFormatPrecision) (const char* format,int default_value);
    bool (* igImCharIsBlankA) (char c);
    bool (* igImCharIsBlankW) (unsigned int c);
    const char* (* igImTextCharToUtf8) (char out_buf[5],unsigned int c);
    int (* igImTextStrToUtf8) (char* out_buf,int out_buf_size,const ImWchar* in_text,const ImWchar* in_text_end);
    int (* igImTextCharFromUtf8) (unsigned int* out_char,const char* in_text,const char* in_text_end);
    int (* igImTextStrFromUtf8) (ImWchar* out_buf,int out_buf_size,const char* in_text,const char* in_text_end,const char** in_remaining);
    int (* igImTextCountCharsFromUtf8) (const char* in_text,const char* in_text_end);
    int (* igImTextCountUtf8BytesFromChar) (const char* in_text,const char* in_text_end);
    int (* igImTextCountUtf8BytesFromStr) (const ImWchar* in_text,const ImWchar* in_text_end);
    ImFileHandle (* igImFileOpen) (const char* filename,const char* mode);
    bool (* igImFileClose) (ImFileHandle file);
    ImU64 (* igImFileGetSize) (ImFileHandle file);
    ImU64 (* igImFileRead) (void* data,ImU64 size,ImU64 count,ImFileHandle file);
    ImU64 (* igImFileWrite) (const void* data,ImU64 size,ImU64 count,ImFileHandle file);
    void* (* igImFileLoadToMemory) (const char* filename,const char* mode,size_t* out_file_size,int padding_bytes);
    float (* igImPow_Float) (float x,float y);
    double (* igImPow_double) (double x,double y);
    float (* igImLog_Float) (float x);
    double (* igImLog_double) (double x);
    int (* igImAbs_Int) (int x);
    float (* igImAbs_Float) (float x);
    double (* igImAbs_double) (double x);
    float (* igImSign_Float) (float x);
    double (* igImSign_double) (double x);
    float (* igImRsqrt_Float) (float x);
    double (* igImRsqrt_double) (double x);
    void (* igImMin) (ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs);
    void (* igImMax) (ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs);
    void (* igImClamp) (ImVec2 *pOut,const ImVec2 v,const ImVec2 mn,ImVec2 mx);
    void (* igImLerp_Vec2Float) (ImVec2 *pOut,const ImVec2 a,const ImVec2 b,float t);
    void (* igImLerp_Vec2Vec2) (ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 t);
    void (* igImLerp_Vec4) (ImVec4 *pOut,const ImVec4 a,const ImVec4 b,float t);
    float (* igImSaturate) (float f);
    float (* igImLengthSqr_Vec2) (const ImVec2 lhs);
    float (* igImLengthSqr_Vec4) (const ImVec4 lhs);
    float (* igImInvLength) (const ImVec2 lhs,float fail_value);
    float (* igImFloor_Float) (float f);
    float (* igImFloorSigned) (float f);
    void (* igImFloor_Vec2) (ImVec2 *pOut,const ImVec2 v);
    int (* igImModPositive) (int a,int b);
    float (* igImDot) (const ImVec2 a,const ImVec2 b);
    void (* igImRotate) (ImVec2 *pOut,const ImVec2 v,float cos_a,float sin_a);
    float (* igImLinearSweep) (float current,float target,float speed);
    void (* igImMul) (ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs);
    void (* igImBezierCubicCalc) (ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,float t);
    void (* igImBezierCubicClosestPoint) (ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,int num_segments);
    void (* igImBezierCubicClosestPointCasteljau) (ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,float tess_tol);
    void (* igImBezierQuadraticCalc) (ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,float t);
    void (* igImLineClosestPoint) (ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 p);
    bool (* igImTriangleContainsPoint) (const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p);
    void (* igImTriangleClosestPoint) (ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p);
    void (* igImTriangleBarycentricCoords) (const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p,float* out_u,float* out_v,float* out_w);
    float (* igImTriangleArea) (const ImVec2 a,const ImVec2 b,const ImVec2 c);
    ImGuiDir (* igImGetDirQuadrantFromDelta) (float dx,float dy);
    ImVec1* (* ImVec1_ImVec1_Nil) (void);
    void (* ImVec1_destroy) (ImVec1* self);
    ImVec1* (* ImVec1_ImVec1_Float) (float _x);
    ImVec2ih* (* ImVec2ih_ImVec2ih_Nil) (void);
    void (* ImVec2ih_destroy) (ImVec2ih* self);
    ImVec2ih* (* ImVec2ih_ImVec2ih_short) (short _x,short _y);
    ImVec2ih* (* ImVec2ih_ImVec2ih_Vec2) (const ImVec2 rhs);
    ImRect* (* ImRect_ImRect_Nil) (void);
    void (* ImRect_destroy) (ImRect* self);
    ImRect* (* ImRect_ImRect_Vec2) (const ImVec2 min,const ImVec2 max);
    ImRect* (* ImRect_ImRect_Vec4) (const ImVec4 v);
    ImRect* (* ImRect_ImRect_Float) (float x1,float y1,float x2,float y2);
    void (* ImRect_GetCenter) (ImVec2 *pOut,ImRect* self);
    void (* ImRect_GetSize) (ImVec2 *pOut,ImRect* self);
    float (* ImRect_GetWidth) (ImRect* self);
    float (* ImRect_GetHeight) (ImRect* self);
    float (* ImRect_GetArea) (ImRect* self);
    void (* ImRect_GetTL) (ImVec2 *pOut,ImRect* self);
    void (* ImRect_GetTR) (ImVec2 *pOut,ImRect* self);
    void (* ImRect_GetBL) (ImVec2 *pOut,ImRect* self);
    void (* ImRect_GetBR) (ImVec2 *pOut,ImRect* self);
    bool (* ImRect_Contains_Vec2) (ImRect* self,const ImVec2 p);
    bool (* ImRect_Contains_Rect) (ImRect* self,const ImRect r);
    bool (* ImRect_Overlaps) (ImRect* self,const ImRect r);
    void (* ImRect_Add_Vec2) (ImRect* self,const ImVec2 p);
    void (* ImRect_Add_Rect) (ImRect* self,const ImRect r);
    void (* ImRect_Expand_Float) (ImRect* self,const float amount);
    void (* ImRect_Expand_Vec2) (ImRect* self,const ImVec2 amount);
    void (* ImRect_Translate) (ImRect* self,const ImVec2 d);
    void (* ImRect_TranslateX) (ImRect* self,float dx);
    void (* ImRect_TranslateY) (ImRect* self,float dy);
    void (* ImRect_ClipWith) (ImRect* self,const ImRect r);
    void (* ImRect_ClipWithFull) (ImRect* self,const ImRect r);
    void (* ImRect_Floor) (ImRect* self);
    bool (* ImRect_IsInverted) (ImRect* self);
    void (* ImRect_ToVec4) (ImVec4 *pOut,ImRect* self);
    bool (* igImBitArrayTestBit) (const ImU32* arr,int n);
    void (* igImBitArrayClearBit) (ImU32* arr,int n);
    void (* igImBitArraySetBit) (ImU32* arr,int n);
    void (* igImBitArraySetBitRange) (ImU32* arr,int n,int n2);
    void (* ImBitVector_Create) (ImBitVector* self,int sz);
    void (* ImBitVector_Clear) (ImBitVector* self);
    bool (* ImBitVector_TestBit) (ImBitVector* self,int n);
    void (* ImBitVector_SetBit) (ImBitVector* self,int n);
    void (* ImBitVector_ClearBit) (ImBitVector* self,int n);
    ImDrawListSharedData* (* ImDrawListSharedData_ImDrawListSharedData) (void);
    void (* ImDrawListSharedData_destroy) (ImDrawListSharedData* self);
    void (* ImDrawListSharedData_SetCircleTessellationMaxError) (ImDrawListSharedData* self,float max_error);
    void (* ImDrawDataBuilder_Clear) (ImDrawDataBuilder* self);
    void (* ImDrawDataBuilder_ClearFreeMemory) (ImDrawDataBuilder* self);
    int (* ImDrawDataBuilder_GetDrawListCount) (ImDrawDataBuilder* self);
    void (* ImDrawDataBuilder_FlattenIntoSingleLayer) (ImDrawDataBuilder* self);
    ImGuiStyleMod* (* ImGuiStyleMod_ImGuiStyleMod_Int) (ImGuiStyleVar idx,int v);
    void (* ImGuiStyleMod_destroy) (ImGuiStyleMod* self);
    ImGuiStyleMod* (* ImGuiStyleMod_ImGuiStyleMod_Float) (ImGuiStyleVar idx,float v);
    ImGuiStyleMod* (* ImGuiStyleMod_ImGuiStyleMod_Vec2) (ImGuiStyleVar idx,ImVec2 v);
    ImGuiMenuColumns* (* ImGuiMenuColumns_ImGuiMenuColumns) (void);
    void (* ImGuiMenuColumns_destroy) (ImGuiMenuColumns* self);
    void (* ImGuiMenuColumns_Update) (ImGuiMenuColumns* self,int count,float spacing,bool clear);
    float (* ImGuiMenuColumns_DeclColumns) (ImGuiMenuColumns* self,float w0,float w1,float w2);
    float (* ImGuiMenuColumns_CalcExtraSpace) (ImGuiMenuColumns* self,float avail_w);
    ImGuiInputTextState* (* ImGuiInputTextState_ImGuiInputTextState) (void);
    void (* ImGuiInputTextState_destroy) (ImGuiInputTextState* self);
    void (* ImGuiInputTextState_ClearText) (ImGuiInputTextState* self);
    void (* ImGuiInputTextState_ClearFreeMemory) (ImGuiInputTextState* self);
    int (* ImGuiInputTextState_GetUndoAvailCount) (ImGuiInputTextState* self);
    int (* ImGuiInputTextState_GetRedoAvailCount) (ImGuiInputTextState* self);
    void (* ImGuiInputTextState_OnKeyPressed) (ImGuiInputTextState* self,int key);
    void (* ImGuiInputTextState_CursorAnimReset) (ImGuiInputTextState* self);
    void (* ImGuiInputTextState_CursorClamp) (ImGuiInputTextState* self);
    bool (* ImGuiInputTextState_HasSelection) (ImGuiInputTextState* self);
    void (* ImGuiInputTextState_ClearSelection) (ImGuiInputTextState* self);
    void (* ImGuiInputTextState_SelectAll) (ImGuiInputTextState* self);
    ImGuiPopupData* (* ImGuiPopupData_ImGuiPopupData) (void);
    void (* ImGuiPopupData_destroy) (ImGuiPopupData* self);
    ImGuiNavItemData* (* ImGuiNavItemData_ImGuiNavItemData) (void);
    void (* ImGuiNavItemData_destroy) (ImGuiNavItemData* self);
    void (* ImGuiNavItemData_Clear) (ImGuiNavItemData* self);
    ImGuiNextWindowData* (* ImGuiNextWindowData_ImGuiNextWindowData) (void);
    void (* ImGuiNextWindowData_destroy) (ImGuiNextWindowData* self);
    void (* ImGuiNextWindowData_ClearFlags) (ImGuiNextWindowData* self);
    ImGuiNextItemData* (* ImGuiNextItemData_ImGuiNextItemData) (void);
    void (* ImGuiNextItemData_destroy) (ImGuiNextItemData* self);
    void (* ImGuiNextItemData_ClearFlags) (ImGuiNextItemData* self);
    ImGuiPtrOrIndex* (* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr) (void* ptr);
    void (* ImGuiPtrOrIndex_destroy) (ImGuiPtrOrIndex* self);
    ImGuiPtrOrIndex* (* ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int) (int index);
    ImGuiOldColumnData* (* ImGuiOldColumnData_ImGuiOldColumnData) (void);
    void (* ImGuiOldColumnData_destroy) (ImGuiOldColumnData* self);
    ImGuiOldColumns* (* ImGuiOldColumns_ImGuiOldColumns) (void);
    void (* ImGuiOldColumns_destroy) (ImGuiOldColumns* self);
    ImGuiDockNode* (* ImGuiDockNode_ImGuiDockNode) (ImGuiID id);
    void (* ImGuiDockNode_destroy) (ImGuiDockNode* self);
    bool (* ImGuiDockNode_IsRootNode) (ImGuiDockNode* self);
    bool (* ImGuiDockNode_IsDockSpace) (ImGuiDockNode* self);
    bool (* ImGuiDockNode_IsFloatingNode) (ImGuiDockNode* self);
    bool (* ImGuiDockNode_IsCentralNode) (ImGuiDockNode* self);
    bool (* ImGuiDockNode_IsHiddenTabBar) (ImGuiDockNode* self);
    bool (* ImGuiDockNode_IsNoTabBar) (ImGuiDockNode* self);
    bool (* ImGuiDockNode_IsSplitNode) (ImGuiDockNode* self);
    bool (* ImGuiDockNode_IsLeafNode) (ImGuiDockNode* self);
    bool (* ImGuiDockNode_IsEmpty) (ImGuiDockNode* self);
    ImGuiDockNodeFlags (* ImGuiDockNode_GetMergedFlags) (ImGuiDockNode* self);
    void (* ImGuiDockNode_Rect) (ImRect *pOut,ImGuiDockNode* self);
    ImGuiDockContext* (* ImGuiDockContext_ImGuiDockContext) (void);
    void (* ImGuiDockContext_destroy) (ImGuiDockContext* self);
    ImGuiViewportP* (* ImGuiViewportP_ImGuiViewportP) (void);
    void (* ImGuiViewportP_destroy) (ImGuiViewportP* self);
    void (* ImGuiViewportP_ClearRequestFlags) (ImGuiViewportP* self);
    void (* ImGuiViewportP_CalcWorkRectPos) (ImVec2 *pOut,ImGuiViewportP* self,const ImVec2 off_min);
    void (* ImGuiViewportP_CalcWorkRectSize) (ImVec2 *pOut,ImGuiViewportP* self,const ImVec2 off_min,const ImVec2 off_max);
    void (* ImGuiViewportP_UpdateWorkRect) (ImGuiViewportP* self);
    void (* ImGuiViewportP_GetMainRect) (ImRect *pOut,ImGuiViewportP* self);
    void (* ImGuiViewportP_GetWorkRect) (ImRect *pOut,ImGuiViewportP* self);
    void (* ImGuiViewportP_GetBuildWorkRect) (ImRect *pOut,ImGuiViewportP* self);
    ImGuiWindowSettings* (* ImGuiWindowSettings_ImGuiWindowSettings) (void);
    void (* ImGuiWindowSettings_destroy) (ImGuiWindowSettings* self);
    char* (* ImGuiWindowSettings_GetName) (ImGuiWindowSettings* self);
    ImGuiSettingsHandler* (* ImGuiSettingsHandler_ImGuiSettingsHandler) (void);
    void (* ImGuiSettingsHandler_destroy) (ImGuiSettingsHandler* self);
    ImGuiMetricsConfig* (* ImGuiMetricsConfig_ImGuiMetricsConfig) (void);
    void (* ImGuiMetricsConfig_destroy) (ImGuiMetricsConfig* self);
    ImGuiStackSizes* (* ImGuiStackSizes_ImGuiStackSizes) (void);
    void (* ImGuiStackSizes_destroy) (ImGuiStackSizes* self);
    void (* ImGuiStackSizes_SetToCurrentState) (ImGuiStackSizes* self);
    void (* ImGuiStackSizes_CompareWithCurrentState) (ImGuiStackSizes* self);
    ImGuiContextHook* (* ImGuiContextHook_ImGuiContextHook) (void);
    void (* ImGuiContextHook_destroy) (ImGuiContextHook* self);
    ImGuiContext* (* ImGuiContext_ImGuiContext) (ImFontAtlas* shared_font_atlas);
    void (* ImGuiContext_destroy) (ImGuiContext* self);
    ImGuiWindow* (* ImGuiWindow_ImGuiWindow) (ImGuiContext* context,const char* name);
    void (* ImGuiWindow_destroy) (ImGuiWindow* self);
    ImGuiID (* ImGuiWindow_GetID_Str) (ImGuiWindow* self,const char* str,const char* str_end);
    ImGuiID (* ImGuiWindow_GetID_Ptr) (ImGuiWindow* self,const void* ptr);
    ImGuiID (* ImGuiWindow_GetID_Int) (ImGuiWindow* self,int n);
    ImGuiID (* ImGuiWindow_GetIDNoKeepAlive_Str) (ImGuiWindow* self,const char* str,const char* str_end);
    ImGuiID (* ImGuiWindow_GetIDNoKeepAlive_Ptr) (ImGuiWindow* self,const void* ptr);
    ImGuiID (* ImGuiWindow_GetIDNoKeepAlive_Int) (ImGuiWindow* self,int n);
    ImGuiID (* ImGuiWindow_GetIDFromRectangle) (ImGuiWindow* self,const ImRect r_abs);
    void (* ImGuiWindow_Rect) (ImRect *pOut,ImGuiWindow* self);
    float (* ImGuiWindow_CalcFontSize) (ImGuiWindow* self);
    float (* ImGuiWindow_TitleBarHeight) (ImGuiWindow* self);
    void (* ImGuiWindow_TitleBarRect) (ImRect *pOut,ImGuiWindow* self);
    float (* ImGuiWindow_MenuBarHeight) (ImGuiWindow* self);
    void (* ImGuiWindow_MenuBarRect) (ImRect *pOut,ImGuiWindow* self);
    ImGuiLastItemDataBackup* (* ImGuiLastItemDataBackup_ImGuiLastItemDataBackup) (void);
    void (* ImGuiLastItemDataBackup_destroy) (ImGuiLastItemDataBackup* self);
    void (* ImGuiLastItemDataBackup_Backup) (ImGuiLastItemDataBackup* self);
    void (* ImGuiLastItemDataBackup_Restore) (ImGuiLastItemDataBackup* self);
    ImGuiTabItem* (* ImGuiTabItem_ImGuiTabItem) (void);
    void (* ImGuiTabItem_destroy) (ImGuiTabItem* self);
    ImGuiTabBar* (* ImGuiTabBar_ImGuiTabBar) (void);
    void (* ImGuiTabBar_destroy) (ImGuiTabBar* self);
    int (* ImGuiTabBar_GetTabOrder) (ImGuiTabBar* self,const ImGuiTabItem* tab);
    const char* (* ImGuiTabBar_GetTabName) (ImGuiTabBar* self,const ImGuiTabItem* tab);
    ImGuiTableColumn* (* ImGuiTableColumn_ImGuiTableColumn) (void);
    void (* ImGuiTableColumn_destroy) (ImGuiTableColumn* self);
    ImGuiTable* (* ImGuiTable_ImGuiTable) (void);
    void (* ImGuiTable_destroy) (ImGuiTable* self);
    ImGuiTableTempData* (* ImGuiTableTempData_ImGuiTableTempData) (void);
    void (* ImGuiTableTempData_destroy) (ImGuiTableTempData* self);
    ImGuiTableColumnSettings* (* ImGuiTableColumnSettings_ImGuiTableColumnSettings) (void);
    void (* ImGuiTableColumnSettings_destroy) (ImGuiTableColumnSettings* self);
    ImGuiTableSettings* (* ImGuiTableSettings_ImGuiTableSettings) (void);
    void (* ImGuiTableSettings_destroy) (ImGuiTableSettings* self);
    ImGuiTableColumnSettings* (* ImGuiTableSettings_GetColumnSettings) (ImGuiTableSettings* self);
    ImGuiWindow* (* igGetCurrentWindowRead) (void);
    ImGuiWindow* (* igGetCurrentWindow) (void);
    ImGuiWindow* (* igFindWindowByID) (ImGuiID id);
    ImGuiWindow* (* igFindWindowByName) (const char* name);
    void (* igUpdateWindowParentAndRootLinks) (ImGuiWindow* window,ImGuiWindowFlags flags,ImGuiWindow* parent_window);
    void (* igCalcWindowNextAutoFitSize) (ImVec2 *pOut,ImGuiWindow* window);
    bool (* igIsWindowChildOf) (ImGuiWindow* window,ImGuiWindow* potential_parent);
    bool (* igIsWindowAbove) (ImGuiWindow* potential_above,ImGuiWindow* potential_below);
    bool (* igIsWindowNavFocusable) (ImGuiWindow* window);
    void (* igSetWindowPos_WindowPtr) (ImGuiWindow* window,const ImVec2 pos,ImGuiCond cond);
    void (* igSetWindowSize_WindowPtr) (ImGuiWindow* window,const ImVec2 size,ImGuiCond cond);
    void (* igSetWindowCollapsed_WindowPtr) (ImGuiWindow* window,bool collapsed,ImGuiCond cond);
    void (* igSetWindowHitTestHole) (ImGuiWindow* window,const ImVec2 pos,const ImVec2 size);
    void (* igFocusWindow) (ImGuiWindow* window);
    void (* igFocusTopMostWindowUnderOne) (ImGuiWindow* under_this_window,ImGuiWindow* ignore_window);
    void (* igBringWindowToFocusFront) (ImGuiWindow* window);
    void (* igBringWindowToDisplayFront) (ImGuiWindow* window);
    void (* igBringWindowToDisplayBack) (ImGuiWindow* window);
    void (* igSetCurrentFont) (ImFont* font);
    ImFont* (* igGetDefaultFont) (void);
    ImDrawList* (* igGetForegroundDrawList_WindowPtr) (ImGuiWindow* window);
    void (* igInitialize) (ImGuiContext* context);
    void (* igShutdown) (ImGuiContext* context);
    void (* igUpdateHoveredWindowAndCaptureFlags) (void);
    void (* igStartMouseMovingWindow) (ImGuiWindow* window);
    void (* igStartMouseMovingWindowOrNode) (ImGuiWindow* window,ImGuiDockNode* node,bool undock_floating_node);
    void (* igUpdateMouseMovingWindowNewFrame) (void);
    void (* igUpdateMouseMovingWindowEndFrame) (void);
    ImGuiID (* igAddContextHook) (ImGuiContext* context,const ImGuiContextHook* hook);
    void (* igRemoveContextHook) (ImGuiContext* context,ImGuiID hook_to_remove);
    void (* igCallContextHooks) (ImGuiContext* context,ImGuiContextHookType type);
    void (* igTranslateWindowsInViewport) (ImGuiViewportP* viewport,const ImVec2 old_pos,const ImVec2 new_pos);
    void (* igScaleWindowsInViewport) (ImGuiViewportP* viewport,float scale);
    void (* igDestroyPlatformWindow) (ImGuiViewportP* viewport);
    void (* igSetCurrentViewport) (ImGuiWindow* window,ImGuiViewportP* viewport);
    const ImGuiPlatformMonitor* (* igGetViewportPlatformMonitor) (ImGuiViewport* viewport);
    void (* igMarkIniSettingsDirty_Nil) (void);
    void (* igMarkIniSettingsDirty_WindowPtr) (ImGuiWindow* window);
    void (* igClearIniSettings) (void);
    ImGuiWindowSettings* (* igCreateNewWindowSettings) (const char* name);
    ImGuiWindowSettings* (* igFindWindowSettings) (ImGuiID id);
    ImGuiWindowSettings* (* igFindOrCreateWindowSettings) (const char* name);
    ImGuiSettingsHandler* (* igFindSettingsHandler) (const char* type_name);
    void (* igSetNextWindowScroll) (const ImVec2 scroll);
    void (* igSetScrollX_WindowPtr) (ImGuiWindow* window,float scroll_x);
    void (* igSetScrollY_WindowPtr) (ImGuiWindow* window,float scroll_y);
    void (* igSetScrollFromPosX_WindowPtr) (ImGuiWindow* window,float local_x,float center_x_ratio);
    void (* igSetScrollFromPosY_WindowPtr) (ImGuiWindow* window,float local_y,float center_y_ratio);
    void (* igScrollToBringRectIntoView) (ImVec2 *pOut,ImGuiWindow* window,const ImRect item_rect);
    ImGuiID (* igGetItemID) (void);
    ImGuiItemStatusFlags (* igGetItemStatusFlags) (void);
    ImGuiID (* igGetActiveID) (void);
    ImGuiID (* igGetFocusID) (void);
    ImGuiItemFlags (* igGetItemFlags) (void);
    void (* igSetActiveID) (ImGuiID id,ImGuiWindow* window);
    void (* igSetFocusID) (ImGuiID id,ImGuiWindow* window);
    void (* igClearActiveID) (void);
    ImGuiID (* igGetHoveredID) (void);
    void (* igSetHoveredID) (ImGuiID id);
    void (* igKeepAliveID) (ImGuiID id);
    void (* igMarkItemEdited) (ImGuiID id);
    void (* igPushOverrideID) (ImGuiID id);
    ImGuiID (* igGetIDWithSeed) (const char* str_id_begin,const char* str_id_end,ImGuiID seed);
    void (* igItemSize_Vec2) (const ImVec2 size,float text_baseline_y);
    void (* igItemSize_Rect) (const ImRect bb,float text_baseline_y);
    bool (* igItemAdd) (const ImRect bb,ImGuiID id,const ImRect* nav_bb,ImGuiItemAddFlags flags);
    bool (* igItemHoverable) (const ImRect bb,ImGuiID id);
    void (* igItemFocusable) (ImGuiWindow* window,ImGuiID id);
    bool (* igIsClippedEx) (const ImRect bb,ImGuiID id,bool clip_even_when_logged);
    void (* igSetLastItemData) (ImGuiWindow* window,ImGuiID item_id,ImGuiItemStatusFlags status_flags,const ImRect item_rect);
    void (* igCalcItemSize) (ImVec2 *pOut,ImVec2 size,float default_w,float default_h);
    float (* igCalcWrapWidthForPos) (const ImVec2 pos,float wrap_pos_x);
    void (* igPushMultiItemsWidths) (int components,float width_full);
    void (* igPushItemFlag) (ImGuiItemFlags option,bool enabled);
    void (* igPopItemFlag) (void);
    bool (* igIsItemToggledSelection) (void);
    void (* igGetContentRegionMaxAbs) (ImVec2 *pOut);
    void (* igShrinkWidths) (ImGuiShrinkWidthItem* items,int count,float width_excess);
    void (* igLogBegin) (ImGuiLogType type,int auto_open_depth);
    void (* igLogToBuffer) (int auto_open_depth);
    void (* igLogRenderedText) (const ImVec2* ref_pos,const char* text,const char* text_end);
    void (* igLogSetNextTextDecoration) (const char* prefix,const char* suffix);
    bool (* igBeginChildEx) (const char* name,ImGuiID id,const ImVec2 size_arg,bool border,ImGuiWindowFlags flags);
    void (* igOpenPopupEx) (ImGuiID id,ImGuiPopupFlags popup_flags);
    void (* igClosePopupToLevel) (int remaining,bool restore_focus_to_window_under_popup);
    void (* igClosePopupsOverWindow) (ImGuiWindow* ref_window,bool restore_focus_to_window_under_popup);
    bool (* igIsPopupOpen_ID) (ImGuiID id,ImGuiPopupFlags popup_flags);
    bool (* igBeginPopupEx) (ImGuiID id,ImGuiWindowFlags extra_flags);
    void (* igBeginTooltipEx) (ImGuiWindowFlags extra_flags,ImGuiTooltipFlags tooltip_flags);
    void (* igGetPopupAllowedExtentRect) (ImRect *pOut,ImGuiWindow* window);
    ImGuiWindow* (* igGetTopMostPopupModal) (void);
    void (* igFindBestWindowPosForPopup) (ImVec2 *pOut,ImGuiWindow* window);
    void (* igFindBestWindowPosForPopupEx) (ImVec2 *pOut,const ImVec2 ref_pos,const ImVec2 size,ImGuiDir* last_dir,const ImRect r_outer,const ImRect r_avoid,ImGuiPopupPositionPolicy policy);
    bool (* igBeginViewportSideBar) (const char* name,ImGuiViewport* viewport,ImGuiDir dir,float size,ImGuiWindowFlags window_flags);
    bool (* igBeginComboPopup) (ImGuiID popup_id,const ImRect bb,ImGuiComboFlags flags);
    void (* igNavInitWindow) (ImGuiWindow* window,bool force_reinit);
    bool (* igNavMoveRequestButNoResultYet) (void);
    void (* igNavMoveRequestCancel) (void);
    void (* igNavMoveRequestForward) (ImGuiDir move_dir,ImGuiDir clip_dir,const ImRect bb_rel,ImGuiNavMoveFlags move_flags);
    void (* igNavMoveRequestTryWrapping) (ImGuiWindow* window,ImGuiNavMoveFlags move_flags);
    float (* igGetNavInputAmount) (ImGuiNavInput n,ImGuiInputReadMode mode);
    void (* igGetNavInputAmount2d) (ImVec2 *pOut,ImGuiNavDirSourceFlags dir_sources,ImGuiInputReadMode mode,float slow_factor,float fast_factor);
    int (* igCalcTypematicRepeatAmount) (float t0,float t1,float repeat_delay,float repeat_rate);
    void (* igActivateItem) (ImGuiID id);
    void (* igSetNavID) (ImGuiID id,ImGuiNavLayer nav_layer,ImGuiID focus_scope_id,const ImRect rect_rel);
    void (* igPushFocusScope) (ImGuiID id);
    void (* igPopFocusScope) (void);
    ImGuiID (* igGetFocusedFocusScope) (void);
    ImGuiID (* igGetFocusScope) (void);
    void (* igSetItemUsingMouseWheel) (void);
    bool (* igIsActiveIdUsingNavDir) (ImGuiDir dir);
    bool (* igIsActiveIdUsingNavInput) (ImGuiNavInput input);
    bool (* igIsActiveIdUsingKey) (ImGuiKey key);
    bool (* igIsMouseDragPastThreshold) (ImGuiMouseButton button,float lock_threshold);
    bool (* igIsKeyPressedMap) (ImGuiKey key,bool repeat);
    bool (* igIsNavInputDown) (ImGuiNavInput n);
    bool (* igIsNavInputTest) (ImGuiNavInput n,ImGuiInputReadMode rm);
    ImGuiKeyModFlags (* igGetMergedKeyModFlags) (void);
    void (* igDockContextInitialize) (ImGuiContext* ctx);
    void (* igDockContextShutdown) (ImGuiContext* ctx);
    void (* igDockContextClearNodes) (ImGuiContext* ctx,ImGuiID root_id,bool clear_settings_refs);
    void (* igDockContextRebuildNodes) (ImGuiContext* ctx);
    void (* igDockContextNewFrameUpdateUndocking) (ImGuiContext* ctx);
    void (* igDockContextNewFrameUpdateDocking) (ImGuiContext* ctx);
    ImGuiID (* igDockContextGenNodeID) (ImGuiContext* ctx);
    void (* igDockContextQueueDock) (ImGuiContext* ctx,ImGuiWindow* target,ImGuiDockNode* target_node,ImGuiWindow* payload,ImGuiDir split_dir,float split_ratio,bool split_outer);
    void (* igDockContextQueueUndockWindow) (ImGuiContext* ctx,ImGuiWindow* window);
    void (* igDockContextQueueUndockNode) (ImGuiContext* ctx,ImGuiDockNode* node);
    bool (* igDockContextCalcDropPosForDocking) (ImGuiWindow* target,ImGuiDockNode* target_node,ImGuiWindow* payload,ImGuiDir split_dir,bool split_outer,ImVec2* out_pos);
    bool (* igDockNodeBeginAmendTabBar) (ImGuiDockNode* node);
    void (* igDockNodeEndAmendTabBar) (void);
    ImGuiDockNode* (* igDockNodeGetRootNode) (ImGuiDockNode* node);
    int (* igDockNodeGetDepth) (const ImGuiDockNode* node);
    ImGuiID (* igDockNodeGetWindowMenuButtonId) (const ImGuiDockNode* node);
    ImGuiDockNode* (* igGetWindowDockNode) (void);
    bool (* igGetWindowAlwaysWantOwnTabBar) (ImGuiWindow* window);
    void (* igBeginDocked) (ImGuiWindow* window,bool* p_open);
    void (* igBeginDockableDragDropSource) (ImGuiWindow* window);
    void (* igBeginDockableDragDropTarget) (ImGuiWindow* window);
    void (* igSetWindowDock) (ImGuiWindow* window,ImGuiID dock_id,ImGuiCond cond);
    void (* igDockBuilderDockWindow) (const char* window_name,ImGuiID node_id);
    ImGuiDockNode* (* igDockBuilderGetNode) (ImGuiID node_id);
    ImGuiDockNode* (* igDockBuilderGetCentralNode) (ImGuiID node_id);
    ImGuiID (* igDockBuilderAddNode) (ImGuiID node_id,ImGuiDockNodeFlags flags);
    void (* igDockBuilderRemoveNode) (ImGuiID node_id);
    void (* igDockBuilderRemoveNodeDockedWindows) (ImGuiID node_id,bool clear_settings_refs);
    void (* igDockBuilderRemoveNodeChildNodes) (ImGuiID node_id);
    void (* igDockBuilderSetNodePos) (ImGuiID node_id,ImVec2 pos);
    void (* igDockBuilderSetNodeSize) (ImGuiID node_id,ImVec2 size);
    ImGuiID (* igDockBuilderSplitNode) (ImGuiID node_id,ImGuiDir split_dir,float size_ratio_for_node_at_dir,ImGuiID* out_id_at_dir,ImGuiID* out_id_at_opposite_dir);
    void (* igDockBuilderCopyDockSpace) (ImGuiID src_dockspace_id,ImGuiID dst_dockspace_id,ImVector_const_charPtr* in_window_remap_pairs);
    void (* igDockBuilderCopyNode) (ImGuiID src_node_id,ImGuiID dst_node_id,ImVector_ImGuiID* out_node_remap_pairs);
    void (* igDockBuilderCopyWindowSettings) (const char* src_name,const char* dst_name);
    void (* igDockBuilderFinish) (ImGuiID node_id);
    bool (* igBeginDragDropTargetCustom) (const ImRect bb,ImGuiID id);
    void (* igClearDragDrop) (void);
    bool (* igIsDragDropPayloadBeingAccepted) (void);
    void (* igSetWindowClipRectBeforeSetChannel) (ImGuiWindow* window,const ImRect clip_rect);
    void (* igBeginColumns) (const char* str_id,int count,ImGuiOldColumnFlags flags);
    void (* igEndColumns) (void);
    void (* igPushColumnClipRect) (int column_index);
    void (* igPushColumnsBackground) (void);
    void (* igPopColumnsBackground) (void);
    ImGuiID (* igGetColumnsID) (const char* str_id,int count);
    ImGuiOldColumns* (* igFindOrCreateColumns) (ImGuiWindow* window,ImGuiID id);
    float (* igGetColumnOffsetFromNorm) (const ImGuiOldColumns* columns,float offset_norm);
    float (* igGetColumnNormFromOffset) (const ImGuiOldColumns* columns,float offset);
    void (* igTableOpenContextMenu) (int column_n);
    void (* igTableSetColumnWidth) (int column_n,float width);
    void (* igTableSetColumnSortDirection) (int column_n,ImGuiSortDirection sort_direction,bool append_to_sort_specs);
    int (* igTableGetHoveredColumn) (void);
    float (* igTableGetHeaderRowHeight) (void);
    void (* igTablePushBackgroundChannel) (void);
    void (* igTablePopBackgroundChannel) (void);
    ImGuiTable* (* igGetCurrentTable) (void);
    ImGuiTable* (* igTableFindByID) (ImGuiID id);
    bool (* igBeginTableEx) (const char* name,ImGuiID id,int columns_count,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width);
    void (* igTableBeginInitMemory) (ImGuiTable* table,int columns_count);
    void (* igTableBeginApplyRequests) (ImGuiTable* table);
    void (* igTableSetupDrawChannels) (ImGuiTable* table);
    void (* igTableUpdateLayout) (ImGuiTable* table);
    void (* igTableUpdateBorders) (ImGuiTable* table);
    void (* igTableUpdateColumnsWeightFromWidth) (ImGuiTable* table);
    void (* igTableDrawBorders) (ImGuiTable* table);
    void (* igTableDrawContextMenu) (ImGuiTable* table);
    void (* igTableMergeDrawChannels) (ImGuiTable* table);
    void (* igTableSortSpecsSanitize) (ImGuiTable* table);
    void (* igTableSortSpecsBuild) (ImGuiTable* table);
    ImGuiSortDirection (* igTableGetColumnNextSortDirection) (ImGuiTableColumn* column);
    void (* igTableFixColumnSortDirection) (ImGuiTable* table,ImGuiTableColumn* column);
    float (* igTableGetColumnWidthAuto) (ImGuiTable* table,ImGuiTableColumn* column);
    void (* igTableBeginRow) (ImGuiTable* table);
    void (* igTableEndRow) (ImGuiTable* table);
    void (* igTableBeginCell) (ImGuiTable* table,int column_n);
    void (* igTableEndCell) (ImGuiTable* table);
    void (* igTableGetCellBgRect) (ImRect *pOut,const ImGuiTable* table,int column_n);
    const char* (* igTableGetColumnName_TablePtr) (const ImGuiTable* table,int column_n);
    ImGuiID (* igTableGetColumnResizeID) (const ImGuiTable* table,int column_n,int instance_no);
    float (* igTableGetMaxColumnWidth) (const ImGuiTable* table,int column_n);
    void (* igTableSetColumnWidthAutoSingle) (ImGuiTable* table,int column_n);
    void (* igTableSetColumnWidthAutoAll) (ImGuiTable* table);
    void (* igTableRemove) (ImGuiTable* table);
    void (* igTableGcCompactTransientBuffers_TablePtr) (ImGuiTable* table);
    void (* igTableGcCompactTransientBuffers_TableTempDataPtr) (ImGuiTableTempData* table);
    void (* igTableGcCompactSettings) (void);
    void (* igTableLoadSettings) (ImGuiTable* table);
    void (* igTableSaveSettings) (ImGuiTable* table);
    void (* igTableResetSettings) (ImGuiTable* table);
    ImGuiTableSettings* (* igTableGetBoundSettings) (ImGuiTable* table);
    void (* igTableSettingsInstallHandler) (ImGuiContext* context);
    ImGuiTableSettings* (* igTableSettingsCreate) (ImGuiID id,int columns_count);
    ImGuiTableSettings* (* igTableSettingsFindByID) (ImGuiID id);
    bool (* igBeginTabBarEx) (ImGuiTabBar* tab_bar,const ImRect bb,ImGuiTabBarFlags flags,ImGuiDockNode* dock_node);
    ImGuiTabItem* (* igTabBarFindTabByID) (ImGuiTabBar* tab_bar,ImGuiID tab_id);
    ImGuiTabItem* (* igTabBarFindMostRecentlySelectedTabForActiveWindow) (ImGuiTabBar* tab_bar);
    void (* igTabBarAddTab) (ImGuiTabBar* tab_bar,ImGuiTabItemFlags tab_flags,ImGuiWindow* window);
    void (* igTabBarRemoveTab) (ImGuiTabBar* tab_bar,ImGuiID tab_id);
    void (* igTabBarCloseTab) (ImGuiTabBar* tab_bar,ImGuiTabItem* tab);
    void (* igTabBarQueueReorder) (ImGuiTabBar* tab_bar,const ImGuiTabItem* tab,int offset);
    void (* igTabBarQueueReorderFromMousePos) (ImGuiTabBar* tab_bar,const ImGuiTabItem* tab,ImVec2 mouse_pos);
    bool (* igTabBarProcessReorder) (ImGuiTabBar* tab_bar);
    bool (* igTabItemEx) (ImGuiTabBar* tab_bar,const char* label,bool* p_open,ImGuiTabItemFlags flags,ImGuiWindow* docked_window);
    void (* igTabItemCalcSize) (ImVec2 *pOut,const char* label,bool has_close_button);
    void (* igTabItemBackground) (ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImU32 col);
    void (* igTabItemLabelAndCloseButton) (ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImVec2 frame_padding,const char* label,ImGuiID tab_id,ImGuiID close_button_id,bool is_contents_visible,bool* out_just_closed,bool* out_text_clipped);
    void (* igRenderText) (ImVec2 pos,const char* text,const char* text_end,bool hide_text_after_hash);
    void (* igRenderTextWrapped) (ImVec2 pos,const char* text,const char* text_end,float wrap_width);
    void (* igRenderTextClipped) (const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect);
    void (* igRenderTextClippedEx) (ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect);
    void (* igRenderTextEllipsis) (ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,float clip_max_x,float ellipsis_max_x,const char* text,const char* text_end,const ImVec2* text_size_if_known);
    void (* igRenderFrame) (ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,bool border,float rounding);
    void (* igRenderFrameBorder) (ImVec2 p_min,ImVec2 p_max,float rounding);
    void (* igRenderColorRectWithAlphaCheckerboard) (ImDrawList* draw_list,ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,float grid_step,ImVec2 grid_off,float rounding,ImDrawFlags flags);
    void (* igRenderNavHighlight) (const ImRect bb,ImGuiID id,ImGuiNavHighlightFlags flags);
    const char* (* igFindRenderedTextEnd) (const char* text,const char* text_end);
    void (* igRenderArrow) (ImDrawList* draw_list,ImVec2 pos,ImU32 col,ImGuiDir dir,float scale);
    void (* igRenderBullet) (ImDrawList* draw_list,ImVec2 pos,ImU32 col);
    void (* igRenderCheckMark) (ImDrawList* draw_list,ImVec2 pos,ImU32 col,float sz);
    void (* igRenderMouseCursor) (ImDrawList* draw_list,ImVec2 pos,float scale,ImGuiMouseCursor mouse_cursor,ImU32 col_fill,ImU32 col_border,ImU32 col_shadow);
    void (* igRenderArrowPointingAt) (ImDrawList* draw_list,ImVec2 pos,ImVec2 half_sz,ImGuiDir direction,ImU32 col);
    void (* igRenderArrowDockMenu) (ImDrawList* draw_list,ImVec2 p_min,float sz,ImU32 col);
    void (* igRenderRectFilledRangeH) (ImDrawList* draw_list,const ImRect rect,ImU32 col,float x_start_norm,float x_end_norm,float rounding);
    void (* igRenderRectFilledWithHole) (ImDrawList* draw_list,ImRect outer,ImRect inner,ImU32 col,float rounding);
    void (* igTextEx) (const char* text,const char* text_end,ImGuiTextFlags flags);
    bool (* igButtonEx) (const char* label,const ImVec2 size_arg,ImGuiButtonFlags flags);
    bool (* igCloseButton) (ImGuiID id,const ImVec2 pos);
    bool (* igCollapseButton) (ImGuiID id,const ImVec2 pos,ImGuiDockNode* dock_node);
    bool (* igArrowButtonEx) (const char* str_id,ImGuiDir dir,ImVec2 size_arg,ImGuiButtonFlags flags);
    void (* igScrollbar) (ImGuiAxis axis);
    bool (* igScrollbarEx) (const ImRect bb,ImGuiID id,ImGuiAxis axis,float* p_scroll_v,float avail_v,float contents_v,ImDrawFlags flags);
    bool (* igImageButtonEx) (ImGuiID id,ImTextureID texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec2 padding,const ImVec4 bg_col,const ImVec4 tint_col);
    void (* igGetWindowScrollbarRect) (ImRect *pOut,ImGuiWindow* window,ImGuiAxis axis);
    ImGuiID (* igGetWindowScrollbarID) (ImGuiWindow* window,ImGuiAxis axis);
    ImGuiID (* igGetWindowResizeCornerID) (ImGuiWindow* window,int n);
    ImGuiID (* igGetWindowResizeBorderID) (ImGuiWindow* window,ImGuiDir dir);
    void (* igSeparatorEx) (ImGuiSeparatorFlags flags);
    bool (* igCheckboxFlags_S64Ptr) (const char* label,ImS64* flags,ImS64 flags_value);
    bool (* igCheckboxFlags_U64Ptr) (const char* label,ImU64* flags,ImU64 flags_value);
    bool (* igButtonBehavior) (const ImRect bb,ImGuiID id,bool* out_hovered,bool* out_held,ImGuiButtonFlags flags);
    bool (* igDragBehavior) (ImGuiID id,ImGuiDataType data_type,void* p_v,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
    bool (* igSliderBehavior) (const ImRect bb,ImGuiID id,ImGuiDataType data_type,void* p_v,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags,ImRect* out_grab_bb);
    bool (* igSplitterBehavior) (const ImRect bb,ImGuiID id,ImGuiAxis axis,float* size1,float* size2,float min_size1,float min_size2,float hover_extend,float hover_visibility_delay);
    bool (* igTreeNodeBehavior) (ImGuiID id,ImGuiTreeNodeFlags flags,const char* label,const char* label_end);
    bool (* igTreeNodeBehaviorIsOpen) (ImGuiID id,ImGuiTreeNodeFlags flags);
    void (* igTreePushOverrideID) (ImGuiID id);
    const ImGuiDataTypeInfo* (* igDataTypeGetInfo) (ImGuiDataType data_type);
    int (* igDataTypeFormatString) (char* buf,int buf_size,ImGuiDataType data_type,const void* p_data,const char* format);
    void (* igDataTypeApplyOp) (ImGuiDataType data_type,int op,void* output,const void* arg_1,const void* arg_2);
    bool (* igDataTypeApplyOpFromText) (const char* buf,const char* initial_value_buf,ImGuiDataType data_type,void* p_data,const char* format);
    int (* igDataTypeCompare) (ImGuiDataType data_type,const void* arg_1,const void* arg_2);
    bool (* igDataTypeClamp) (ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max);
    bool (* igInputTextEx) (const char* label,const char* hint,char* buf,int buf_size,const ImVec2 size_arg,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
    bool (* igTempInputText) (const ImRect bb,ImGuiID id,const char* label,char* buf,int buf_size,ImGuiInputTextFlags flags);
    bool (* igTempInputScalar) (const ImRect bb,ImGuiID id,const char* label,ImGuiDataType data_type,void* p_data,const char* format,const void* p_clamp_min,const void* p_clamp_max);
    bool (* igTempInputIsActive) (ImGuiID id);
    ImGuiInputTextState* (* igGetInputTextState) (ImGuiID id);
    void (* igColorTooltip) (const char* text,const float* col,ImGuiColorEditFlags flags);
    void (* igColorEditOptionsPopup) (const float* col,ImGuiColorEditFlags flags);
    void (* igColorPickerOptionsPopup) (const float* ref_col,ImGuiColorEditFlags flags);
    int (* igPlotEx) (ImGuiPlotType plot_type,const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 frame_size);
    void (* igShadeVertsLinearColorGradientKeepAlpha) (ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,ImVec2 gradient_p0,ImVec2 gradient_p1,ImU32 col0,ImU32 col1);
    void (* igShadeVertsLinearUV) (ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,bool clamp);
    void (* igGcCompactTransientMiscBuffers) (void);
    void (* igGcCompactTransientWindowBuffers) (ImGuiWindow* window);
    void (* igGcAwakeTransientWindowBuffers) (ImGuiWindow* window);
    void (* igErrorCheckEndFrameRecover) (ImGuiErrorLogCallback log_callback,void* user_data);
    void (* igDebugDrawItemRect) (ImU32 col);
    void (* igDebugStartItemPicker) (void);
    void (* igShowFontAtlas) (ImFontAtlas* atlas);
    void (* igDebugNodeColumns) (ImGuiOldColumns* columns);
    void (* igDebugNodeDockNode) (ImGuiDockNode* node,const char* label);
    void (* igDebugNodeDrawList) (ImGuiWindow* window,ImGuiViewportP* viewport,const ImDrawList* draw_list,const char* label);
    void (* igDebugNodeDrawCmdShowMeshAndBoundingBox) (ImDrawList* out_draw_list,const ImDrawList* draw_list,const ImDrawCmd* draw_cmd,bool show_mesh,bool show_aabb);
    void (* igDebugNodeFont) (ImFont* font);
    void (* igDebugNodeStorage) (ImGuiStorage* storage,const char* label);
    void (* igDebugNodeTabBar) (ImGuiTabBar* tab_bar,const char* label);
    void (* igDebugNodeTable) (ImGuiTable* table);
    void (* igDebugNodeTableSettings) (ImGuiTableSettings* settings);
    void (* igDebugNodeWindow) (ImGuiWindow* window,const char* label);
    void (* igDebugNodeWindowSettings) (ImGuiWindowSettings* settings);
    void (* igDebugNodeWindowsList) (ImVector_ImGuiWindowPtr* windows,const char* label);
    void (* igDebugNodeViewport) (ImGuiViewportP* viewport);
    void (* igDebugRenderViewportThumbnail) (ImDrawList* draw_list,ImGuiViewportP* viewport,const ImRect bb);
    ImGuiDockRequest* (* ImGuiDockRequest_ImGuiDockRequest) (void);
    void (* ImGuiDockRequest_destroy) (ImGuiDockRequest* self);
    ImGuiDockPreviewData* (* ImGuiDockPreviewData_ImGuiDockPreviewData) (void);
    void (* ImGuiDockPreviewData_destroy) (ImGuiDockPreviewData* self);
    ImGuiDockNodeSettings* (* ImGuiDockNodeSettings_ImGuiDockNodeSettings) (void);
    void (* ImGuiDockNodeSettings_destroy) (ImGuiDockNodeSettings* self);
    const ImFontBuilderIO* (* igImFontAtlasGetBuilderForStbTruetype) (void);
    void (* igImFontAtlasBuildInit) (ImFontAtlas* atlas);
    void (* igImFontAtlasBuildSetupFont) (ImFontAtlas* atlas,ImFont* font,ImFontConfig* font_config,float ascent,float descent);
    void (* igImFontAtlasBuildPackCustomRects) (ImFontAtlas* atlas,void* stbrp_context_opaque);
    void (* igImFontAtlasBuildFinish) (ImFontAtlas* atlas);
    void (* igImFontAtlasBuildRender8bppRectFromString) (ImFontAtlas* atlas,int x,int y,int w,int h,const char* in_str,char in_marker_char,unsigned char in_marker_pixel_value);
    void (* igImFontAtlasBuildRender32bppRectFromString) (ImFontAtlas* atlas,int x,int y,int w,int h,const char* in_str,char in_marker_char,unsigned int in_marker_pixel_value);
    void (* igImFontAtlasBuildMultiplyCalcLookupTable) (unsigned char out_table[256],float in_multiply_factor);
    void (* igImFontAtlasBuildMultiplyRectAlpha8) (const unsigned char table[256],unsigned char* pixels,int x,int y,int w,int h,int stride);
    void (* igLogText) (CONST char *fmt, ...);
    void (* ImGuiTextBuffer_appendf) (struct ImGuiTextBuffer *buffer, const char *fmt, ...);
    float (* igGET_FLT_MAX) ();
    float (* igGET_FLT_MIN) ();
    ImVector_ImWchar* (* ImVector_ImWchar_create) ();
    void (* ImVector_ImWchar_destroy) (ImVector_ImWchar* self);
    void (* ImVector_ImWchar_Init) (ImVector_ImWchar* p);
    void (* ImVector_ImWchar_UnInit) (ImVector_ImWchar* p);
};

/** Current version of the API. */

typedef struct imgui_api_v1 imgui_api;

/******************************************************************************/

/** Create new #sseimgui_api instance, all method pointers assigned. */

SSEIMGUI_API imgui_api SSEIMGUI_CCONV
sseimgui_make_imgui_api ();

/** @see #sseimgui_make_imgui_api() */

typedef imgui_api (SSEIMGUI_CCONV* sseimgui_make_imgui_api_t) ();

/******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif /* SSEIMGUI_IMGUI_WRAPPED_H */

/* EOF */

